#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
"""
import os
import sys
import signal
import time
import psutil
import argparse
from pathlib import Path

SCRIPT_DIR = Path(__file__).parent
PID_FILE = SCRIPT_DIR / "bot.pid"
LOG_FILE = SCRIPT_DIR / "bot.log"

def get_bot_pid():
    """–ü–æ–ª—É—á–∏—Ç—å PID –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    if PID_FILE.exists():
        try:
            with open(PID_FILE, 'r') as f:
                return int(f.read().strip())
        except (ValueError, IOError):
            return None
    return None

def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç"""
    pid = get_bot_pid()
    if pid is None:
        return False
    
    try:
        process = psutil.Process(pid)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—à —Å–∫—Ä–∏–ø—Ç
        if 'main.py' in ' '.join(process.cmdline()):
            return True
    except (psutil.NoSuchProcess, psutil.AccessDenied):
        pass
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
    if PID_FILE.exists():
        PID_FILE.unlink()
    return False

def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
    pid = get_bot_pid()
    if pid is None:
        print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False
    
    try:
        process = psutil.Process(pid)
        print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞ (PID: {pid})...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º—è–≥–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É
        process.terminate()
        
        # –ñ–¥–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
        try:
            process.wait(timeout=10)
        except psutil.TimeoutExpired:
            print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
            process.kill()
            process.wait(timeout=5)
        
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª
        if PID_FILE.exists():
            PID_FILE.unlink()
        
        return True
        
    except (psutil.NoSuchProcess, psutil.AccessDenied) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        if PID_FILE.exists():
            PID_FILE.unlink()
        return False

def start_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    if is_bot_running():
        print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return False
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    cmd = [sys.executable, str(SCRIPT_DIR / "main.py")]
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –ª–æ–≥ —Ñ–∞–π–ª
    with open(LOG_FILE, 'a') as log:
        log.write(f"\n--- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')} ---\n")
        
        process = psutil.Popen(
            cmd,
            stdout=log,
            stderr=log,
            cwd=SCRIPT_DIR
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID
    with open(PID_FILE, 'w') as f:
        f.write(str(process.pid))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    time.sleep(2)
    if process.is_running():
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        print(f"üìù –õ–æ–≥–∏: {LOG_FILE}")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
        if PID_FILE.exists():
            PID_FILE.unlink()
        return False

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    stop_bot()
    time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    return start_bot()

def status_bot():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    if is_bot_running():
        pid = get_bot_pid()
        try:
            process = psutil.Process(pid)
            memory_mb = process.memory_info().rss / 1024 / 1024
            cpu_percent = process.cpu_percent()
            create_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(process.create_time()))
            
            print(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   PID: {pid}")
            print(f"   –ó–∞–ø—É—â–µ–Ω: {create_time}")
            print(f"   –ü–∞–º—è—Ç—å: {memory_mb:.1f} MB")
            print(f"   CPU: {cpu_percent:.1f}%")
        except psutil.NoSuchProcess:
            print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
    else:
        print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")

def show_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏"""
    if LOG_FILE.exists():
        print("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
        print("-" * 50)
        with open(LOG_FILE, 'r') as f:
            lines = f.readlines()
            for line in lines[-50:]:
                print(line.rstrip())
    else:
        print("üìù –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    parser = argparse.ArgumentParser(description='–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–∞')
    parser.add_argument('command', choices=['start', 'stop', 'restart', 'status', 'logs'], 
                       help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    if args.command == 'start':
        start_bot()
    elif args.command == 'stop':
        stop_bot()
    elif args.command == 'restart':
        restart_bot()
    elif args.command == 'status':
        status_bot()
    elif args.command == 'logs':
        show_logs()

if __name__ == "__main__":
    main()
