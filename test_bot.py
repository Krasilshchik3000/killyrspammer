#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
"""
import asyncio
import sqlite3
import tempfile
import os
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from main import (
    SpamResult, parse_llm_response, init_database, save_message_to_db,
    update_admin_decision, add_training_example, SPAM_CHECK_PROMPT
)
from config import BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID

class TestResults:
    def __init__(self):
        self.passed = 0
        self.failed = 0
        self.errors = []
    
    def success(self, test_name):
        self.passed += 1
        print(f"‚úÖ {test_name}")
    
    def fail(self, test_name, error):
        self.failed += 1
        self.errors.append(f"{test_name}: {error}")
        print(f"‚ùå {test_name}: {error}")
    
    def summary(self):
        total = self.passed + self.failed
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.passed}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.failed}")
        
        if self.failed > 0:
            print(f"\nüîç –û—à–∏–±–∫–∏:")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        return self.failed == 0

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    results = TestResults()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if not BOT_TOKEN or BOT_TOKEN == "your-bot-token-here":
        results.fail("Config: BOT_TOKEN", "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        results.success("Config: BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not OPENAI_API_KEY or OPENAI_API_KEY == "your-openai-api-key-here":
        results.fail("Config: OPENAI_API_KEY", "API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        results.success("Config: OPENAI_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if not ADMIN_ID or ADMIN_ID == 123456789:
        results.fail("Config: ADMIN_ID", "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        results.success("Config: ADMIN_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    return results

def test_llm_response_parser():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ LLM"""
    results = TestResults()
    
    test_cases = [
        ("–°–ü–ê–ú", SpamResult.SPAM),
        ("—Å–ø–∞–º", SpamResult.SPAM),
        ("–ù–ï_–°–ü–ê–ú", SpamResult.NOT_SPAM),
        ("–Ω–µ —Å–ø–∞–º", SpamResult.NOT_SPAM),
        ("–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú", SpamResult.MAYBE_SPAM),
        ("–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞–º", SpamResult.MAYBE_SPAM),
        ("–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", SpamResult.MAYBE_SPAM),
        ("", SpamResult.MAYBE_SPAM),
    ]
    
    for input_text, expected in test_cases:
        try:
            result = parse_llm_response(input_text)
            if result == expected:
                results.success(f"Parser: '{input_text}' ‚Üí {expected.value}")
            else:
                results.fail(f"Parser: '{input_text}'", f"–û–∂–∏–¥–∞–ª–∏ {expected.value}, –ø–æ–ª—É—á–∏–ª–∏ {result.value}")
        except Exception as e:
            results.fail(f"Parser: '{input_text}'", str(e))
    
    return results

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    results = TestResults()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
        tmp_db = tmp.name
    
    try:
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        original_functions = {}
        
        def mock_init_database():
            conn = sqlite3.connect(tmp_db)
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY,
                    message_id INTEGER,
                    chat_id INTEGER,
                    user_id INTEGER,
                    username TEXT,
                    text TEXT,
                    created_at TIMESTAMP,
                    llm_result TEXT,
                    admin_decision TEXT,
                    admin_decided_at TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS training_examples (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    text TEXT,
                    is_spam BOOLEAN,
                    source TEXT,
                    created_at TIMESTAMP
                )
            ''')
            conn.commit()
            conn.close()
        
        def mock_add_training_example(text, is_spam, source):
            conn = sqlite3.connect(tmp_db)
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO training_examples (text, is_spam, source, created_at)
                VALUES (?, ?, ?, ?)
            ''', (text, is_spam, source, datetime.now()))
            conn.commit()
            conn.close()
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
        try:
            mock_init_database()
            results.success("Database: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        except Exception as e:
            results.fail("Database: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", str(e))
            return results
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
        conn = sqlite3.connect(tmp_db)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã messages
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='messages'")
        if cursor.fetchone():
            results.success("Database: –¢–∞–±–ª–∏—Ü–∞ messages —Å–æ–∑–¥–∞–Ω–∞")
        else:
            results.fail("Database: –¢–∞–±–ª–∏—Ü–∞ messages", "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã training_examples
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='training_examples'")
        if cursor.fetchone():
            results.success("Database: –¢–∞–±–ª–∏—Ü–∞ training_examples —Å–æ–∑–¥–∞–Ω–∞")
        else:
            results.fail("Database: –¢–∞–±–ª–∏—Ü–∞ training_examples", "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
        try:
            mock_add_training_example("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", True, "TEST")
            cursor.execute("SELECT COUNT(*) FROM training_examples")
            count = cursor.fetchone()[0]
            if count > 0:
                results.success("Database: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞")
            else:
                results.fail("Database: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞", "–ó–∞–ø–∏—Å—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            results.fail("Database: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞", str(e))
        
        conn.close()
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î
        if os.path.exists(tmp_db):
            os.unlink(tmp_db)
    
    return results

def test_prompt():
    """–¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞"""
    results = TestResults()
    
    test_message = "–†–∞–±–æ—Ç–∞ –±–µ–∑ –æ–ø—ã—Ç–∞! –ü–∏—à–∏—Ç–µ –≤ –õ–° üíò"
    
    try:
        prompt = SPAM_CHECK_PROMPT.format(message_text=test_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if "–°–ü–ê–ú" in prompt and "–ù–ï_–°–ü–ê–ú" in prompt and "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú" in prompt:
            results.success("Prompt: –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤")
        else:
            results.fail("Prompt: –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤", "–ù–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç–µ")
        
        if test_message in prompt:
            results.success("Prompt: –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            results.fail("Prompt: –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è", "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–º–ø—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å–ø–∞–º–∞
        spam_criteria = ["–±–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏", "–õ–°", "üíò", "üíù"]
        found_criteria = sum(1 for criterion in spam_criteria if criterion in prompt)
        
        if found_criteria >= 3:
            results.success("Prompt: –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–ø–∞–º–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        else:
            results.fail("Prompt: –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–ø–∞–º–∞", f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {found_criteria} –∏–∑ {len(spam_criteria)} –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
        
    except Exception as e:
        results.fail("Prompt: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ", str(e))
    
    return results

async def test_openai_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI"""
    results = TestResults()
    
    try:
        from openai import AsyncOpenAI
        client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ç–µ—Å—Ç"}],
            max_tokens=5,
            temperature=0,
            timeout=10
        )
        
        if response and response.choices:
            results.success("OpenAI: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø—Ä–æ–º–ø—Ç
            test_message = "–†–∞–±–æ—Ç–∞ –±–µ–∑ –æ–ø—ã—Ç–∞! –í—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥! –ü–∏—à–∏—Ç–µ –≤ –õ–°"
            prompt = SPAM_CHECK_PROMPT.format(message_text=test_message)
            
            response = await client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=5,
                temperature=0,
                timeout=10
            )
            
            llm_answer = response.choices[0].message.content.strip()
            parsed_result = parse_llm_response(llm_answer)
            
            if parsed_result in [SpamResult.SPAM, SpamResult.MAYBE_SPAM]:
                results.success(f"OpenAI: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–æ—Ç–≤–µ—Ç: {parsed_result.value})")
            else:
                results.fail("OpenAI: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞", f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {parsed_result.value}")
                
        else:
            results.fail("OpenAI: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            
    except Exception as e:
        results.fail("OpenAI: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", str(e))
    
    return results

def test_telegram_bot_token():
    """–¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞"""
    results = TestResults()
    
    try:
        from aiogram import Bot
        bot = Bot(token=BOT_TOKEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
        if ":" in BOT_TOKEN and len(BOT_TOKEN.split(":")) == 2:
            bot_id, token_part = BOT_TOKEN.split(":")
            if bot_id.isdigit() and len(token_part) >= 30:
                results.success("Telegram: –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            else:
                results.fail("Telegram: –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
        else:
            results.fail("Telegram: –§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
            
    except Exception as e:
        results.fail("Telegram: –¢–æ–∫–µ–Ω", str(e))
    
    return results

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–∞\n")
    
    all_results = TestResults()
    
    # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    config_results = test_config()
    all_results.passed += config_results.passed
    all_results.failed += config_results.failed
    all_results.errors.extend(config_results.errors)
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ LLM:")
    parser_results = test_llm_response_parser()
    all_results.passed += parser_results.passed
    all_results.failed += parser_results.failed
    all_results.errors.extend(parser_results.errors)
    
    # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    db_results = test_database()
    all_results.passed += db_results.passed
    all_results.failed += db_results.failed
    all_results.errors.extend(db_results.errors)
    
    # –¢–µ—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
    print("\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:")
    prompt_results = test_prompt()
    all_results.passed += prompt_results.passed
    all_results.failed += prompt_results.failed
    all_results.errors.extend(prompt_results.errors)
    
    # –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ Telegram
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞:")
    telegram_results = test_telegram_bot_token()
    all_results.passed += telegram_results.passed
    all_results.failed += telegram_results.failed
    all_results.errors.extend(telegram_results.errors)
    
    # –¢–µ—Å—Ç OpenAI (–µ—Å–ª–∏ –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    if OPENAI_API_KEY and OPENAI_API_KEY != "your-openai-api-key-here":
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API:")
        openai_results = await test_openai_connection()
        all_results.passed += openai_results.passed
        all_results.failed += openai_results.failed
        all_results.errors.extend(openai_results.errors)
    else:
        print("\nü§ñ –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OpenAI API (–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    success = all_results.summary()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    return success

if __name__ == "__main__":
    asyncio.run(run_all_tests())
