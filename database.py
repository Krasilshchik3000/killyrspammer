"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite –∏–ª–∏ PostgreSQL)
"""
import sqlite3
import os
from datetime import datetime
from config import DATABASE_URL, DATABASE_PATH
import logging

logger = logging.getLogger(__name__)

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if DATABASE_URL:
        # PostgreSQL –¥–ª—è Railway
        try:
            import psycopg2
            conn = psycopg2.connect(DATABASE_URL)
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return conn
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            raise
    else:
        # SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        conn = sqlite3.connect(DATABASE_PATH)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î - —É–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–ø—Ç–æ–≤")
    
    if DATABASE_URL:
        # PostgreSQL
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–ø—Ç–æ–≤ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            cursor.execute("DROP TABLE IF EXISTS prompts")
            logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ prompts")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É: {e}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id BIGSERIAL PRIMARY KEY,
                message_id BIGINT,
                chat_id BIGINT,
                user_id BIGINT,
                username TEXT,
                text TEXT,
                created_at TIMESTAMP,
                llm_result TEXT,
                admin_decision TEXT,
                admin_decided_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS training_examples (
                id SERIAL PRIMARY KEY,
                text TEXT,
                is_spam BOOLEAN,
                source TEXT,
                created_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS current_prompt (
                id SERIAL PRIMARY KEY,
                prompt_text TEXT,
                updated_at TIMESTAMP,
                improvement_reason TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_state (
                id SERIAL PRIMARY KEY,
                admin_id BIGINT,
                awaiting_prompt_edit BOOLEAN DEFAULT FALSE,
                pending_prompt TEXT,
                updated_at TIMESTAMP
            )
        ''')
        
        # –ù–ï –°–û–ó–î–ê–ï–ú –ü–†–û–ú–ü–¢ –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò!
        # –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        cursor.execute("SELECT COUNT(*) FROM current_prompt")
        if cursor.fetchone()[0] == 0:
            logger.warning("‚ö†Ô∏è PostgreSQL: –¢–∞–±–ª–∏—Ü–∞ current_prompt –ø—É—Å—Ç–∞—è - –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º")
            # –ù–ï –í–°–¢–ê–í–õ–Ø–ï–ú –ù–ò–ß–ï–ì–û!
        
    else:
        # SQLite (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –£–î–ê–õ–Ø–ï–ú —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–º–ø—Ç–æ–≤ –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            cursor.execute("DROP TABLE IF EXISTS prompts")
            logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ prompts –∏–∑ SQLite")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ SQLite: {e}")
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY,
                message_id INTEGER,
                chat_id INTEGER,
                user_id INTEGER,
                username TEXT,
                text TEXT,
                created_at TIMESTAMP,
                llm_result TEXT,
                admin_decision TEXT,
                admin_decided_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS training_examples (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT,
                is_spam BOOLEAN,
                source TEXT,
                created_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS current_prompt (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                prompt_text TEXT,
                updated_at TIMESTAMP,
                improvement_reason TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_state (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                admin_id INTEGER,
                awaiting_prompt_edit BOOLEAN DEFAULT FALSE,
                pending_prompt TEXT,
                updated_at TIMESTAMP
            )
        ''')
        
        # –ù–ï –°–û–ó–î–ê–ï–ú –ü–†–û–ú–ü–¢ –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò!
        # –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        cursor.execute("SELECT COUNT(*) FROM current_prompt")
        if cursor.fetchone()[0] == 0:
            logger.warning("‚ö†Ô∏è SQLite: –¢–∞–±–ª–∏—Ü–∞ current_prompt –ø—É—Å—Ç–∞—è - –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º")
            # –ù–ï –í–°–¢–ê–í–õ–Ø–ï–ú –ù–ò–ß–ï–ì–û!
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def execute_query(query, params=None, fetch=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        if DATABASE_URL:
            # PostgreSQL - –∑–∞–º–µ–Ω—è–µ–º ? –Ω–∞ %s
            query = query.replace('?', '%s')
        
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        
        result = None
        if fetch == 'one':
            result = cursor.fetchone()
        elif fetch == 'all':
            result = cursor.fetchall()
        
        conn.commit()
        conn.close()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        logger.error(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
        logger.error(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        raise

def set_bot_state(admin_id, awaiting_prompt_edit=False, pending_prompt=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞
        execute_query("DELETE FROM bot_state WHERE admin_id = ?", (admin_id,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        execute_query('''
            INSERT INTO bot_state (admin_id, awaiting_prompt_edit, pending_prompt, updated_at)
            VALUES (?, ?, ?, ?)
        ''', (admin_id, awaiting_prompt_edit, pending_prompt, datetime.now()))
        
        logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: awaiting_prompt_edit={awaiting_prompt_edit}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def get_bot_state(admin_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        result = execute_query(
            "SELECT awaiting_prompt_edit, pending_prompt FROM bot_state WHERE admin_id = ? ORDER BY updated_at DESC LIMIT 1",
            (admin_id,), fetch='one'
        )
        if result:
            awaiting_edit, pending = result
            logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: awaiting_prompt_edit={awaiting_edit}")
            return awaiting_edit, pending
        return False, None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False, None
