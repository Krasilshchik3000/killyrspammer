"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö (SQLite –∏–ª–∏ PostgreSQL)
"""
import sqlite3
import os
from datetime import datetime
from config import DATABASE_URL, DATABASE_PATH
import logging

logger = logging.getLogger(__name__)

def get_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if DATABASE_URL:
        # PostgreSQL –¥–ª—è Railway
        import psycopg2
        return psycopg2.connect(DATABASE_URL)
    else:
        # SQLite –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        return sqlite3.connect(DATABASE_PATH)

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if DATABASE_URL:
        # PostgreSQL
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id BIGSERIAL PRIMARY KEY,
                message_id BIGINT,
                chat_id BIGINT,
                user_id BIGINT,
                username TEXT,
                text TEXT,
                created_at TIMESTAMP,
                llm_result TEXT,
                admin_decision TEXT,
                admin_decided_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS training_examples (
                id SERIAL PRIMARY KEY,
                text TEXT,
                is_spam BOOLEAN,
                source TEXT,
                created_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS prompts (
                id SERIAL PRIMARY KEY,
                prompt_text TEXT,
                version INTEGER,
                created_at TIMESTAMP,
                is_active BOOLEAN DEFAULT FALSE,
                improvement_reason TEXT
            )
        ''')
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        cursor.execute("SELECT COUNT(*) FROM prompts")
        if cursor.fetchone()[0] == 0:
            base_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏: –±–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏/—Ä–∞–±–æ—Ç—É "–±–µ–∑ –æ–ø—ã—Ç–∞/–≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥", –ø—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –õ–°/–±–æ—Ç–∞/–≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–µ—Ä–¥–µ—á–∫–∏ üíò/üíù —Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ –∏–Ω—Ç–∏–º-—É—Å–ª—É–≥–∏. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""
            cursor.execute('''
                INSERT INTO prompts (prompt_text, version, created_at, is_active, improvement_reason)
                VALUES (%s, 1, %s, TRUE, '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç')
            ''', (base_prompt, datetime.now()))
        
    else:
        # SQLite (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)
        conn = sqlite3.connect(DATABASE_PATH)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY,
                message_id INTEGER,
                chat_id INTEGER,
                user_id INTEGER,
                username TEXT,
                text TEXT,
                created_at TIMESTAMP,
                llm_result TEXT,
                admin_decision TEXT,
                admin_decided_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS training_examples (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                text TEXT,
                is_spam BOOLEAN,
                source TEXT,
                created_at TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS prompts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                prompt_text TEXT,
                version INTEGER,
                created_at TIMESTAMP,
                is_active BOOLEAN DEFAULT FALSE,
                improvement_reason TEXT
            )
        ''')
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        cursor.execute("SELECT COUNT(*) FROM prompts")
        if cursor.fetchone()[0] == 0:
            base_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏: –±–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏/—Ä–∞–±–æ—Ç—É "–±–µ–∑ –æ–ø—ã—Ç–∞/–≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥", –ø—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –õ–°/–±–æ—Ç–∞/–≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–µ—Ä–¥–µ—á–∫–∏ üíò/üíù —Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ –∏–Ω—Ç–∏–º-—É—Å–ª—É–≥–∏. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""
            cursor.execute('''
                INSERT INTO prompts (prompt_text, version, created_at, is_active, improvement_reason)
                VALUES (?, 1, ?, TRUE, '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç')
            ''', (base_prompt, datetime.now()))
    
    conn.commit()
    conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def execute_query(query, params=None, fetch=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        if DATABASE_URL:
            # PostgreSQL - –∑–∞–º–µ–Ω—è–µ–º ? –Ω–∞ %s
            query = query.replace('?', '%s')
        
        if params:
            cursor.execute(query, params)
        else:
            cursor.execute(query)
        
        result = None
        if fetch == 'one':
            result = cursor.fetchone()
        elif fetch == 'all':
            result = cursor.fetchall()
        
        conn.commit()
        conn.close()
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        logger.error(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
        logger.error(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        raise
