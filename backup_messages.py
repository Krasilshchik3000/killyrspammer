"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""
import json
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

BACKUP_FILE = "messages_backup.json"

def backup_message(message_data):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if os.path.exists(BACKUP_FILE):
            with open(BACKUP_FILE, 'r', encoding='utf-8') as f:
                backup_data = json.load(f)
        else:
            backup_data = {"messages": []}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        backup_data["messages"].append({
            "message_id": message_data["message_id"],
            "chat_id": message_data["chat_id"],
            "user_id": message_data["user_id"],
            "username": message_data.get("username", ""),
            "text": message_data["text"],
            "llm_result": message_data.get("llm_result"),
            "admin_decision": message_data.get("admin_decision"),
            "timestamp": datetime.now().isoformat()
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(BACKUP_FILE, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
        logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ backup: {message_data['message_id']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ backup: {e}")

def restore_messages_from_backup():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ backup —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(BACKUP_FILE):
            logger.info("üìÅ Backup —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 0
        
        with open(BACKUP_FILE, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        from main import save_message_to_db_direct, update_admin_decision
        
        restored_count = 0
        for msg in backup_data.get("messages", []):
            try:
                save_message_to_db_direct(
                    msg["message_id"],
                    msg["chat_id"], 
                    msg["user_id"],
                    msg["username"],
                    msg["text"],
                    msg["llm_result"]
                )
                
                if msg.get("admin_decision"):
                    update_admin_decision(msg["message_id"], msg["admin_decision"])
                
                restored_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg['message_id']}: {e}")
        
        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ backup")
        return restored_count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ backup: {e}")
        return 0
