import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram import F
import sqlite3
import re
from enum import Enum
from openai import AsyncOpenAI
from config import BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID, ALLOWED_GROUP_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
pending_prompt = None
awaiting_prompt_edit = False
openai_client = None

class SpamResult(Enum):
    SPAM = "–°–ü–ê–ú"
    NOT_SPAM = "–ù–ï_–°–ü–ê–ú"  
    MAYBE_SPAM = "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞
SPAM_CHECK_PROMPT = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏: –±–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏/—Ä–∞–±–æ—Ç—É "–±–µ–∑ –æ–ø—ã—Ç–∞/–≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥", –ø—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –õ–°/–±–æ—Ç–∞/–≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏, —Å–µ—Ä–¥–µ—á–∫–∏ üíò/üíù —Å –Ω–∞–º—ë–∫–æ–º –Ω–∞ –∏–Ω—Ç–∏–º-—É—Å–ª—É–≥–∏. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('antispam.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY,
            message_id INTEGER,
            chat_id INTEGER,
            user_id INTEGER,
            username TEXT,
            text TEXT,
            created_at TIMESTAMP,
            llm_result TEXT,
            admin_decision TEXT,
            admin_decided_at TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS training_examples (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            is_spam BOOLEAN,
            source TEXT,
            created_at TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS prompts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            prompt_text TEXT,
            version INTEGER,
            created_at TIMESTAMP,
            is_active BOOLEAN DEFAULT FALSE,
            improvement_reason TEXT
        )
    ''')
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
    cursor.execute("SELECT COUNT(*) FROM prompts")
    if cursor.fetchone()[0] == 0:
        cursor.execute('''
            INSERT INTO prompts (prompt_text, version, created_at, is_active, improvement_reason)
            VALUES (?, 1, ?, TRUE, '–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç')
        ''', (SPAM_CHECK_PROMPT, datetime.now()))
    
    conn.commit()
    conn.close()

def save_message_to_db(message: types.Message, llm_result: SpamResult = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import execute_query
        execute_query('''
            INSERT INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT (message_id) DO UPDATE SET
            llm_result = EXCLUDED.llm_result
        ''', (
            message.message_id,
            message.chat.id,
            message.from_user.id,
            message.from_user.username or '',
            message.text,
            datetime.now(),
            llm_result.value if llm_result else None
        ))
    except:
        # Fallback –∫ SQLite
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.message_id,
            message.chat.id,
            message.from_user.id,
            message.from_user.username or '',
            message.text,
            datetime.now(),
            llm_result.value if llm_result else None
        ))
        conn.commit()
        conn.close()

def save_message_to_db_direct(message_id: int, chat_id: int, user_id: int, username: str, text: str, llm_result: str):
    """–ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)"""
    try:
        from database import execute_query
        execute_query('''
            INSERT INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT (message_id) DO UPDATE SET
            llm_result = EXCLUDED.llm_result
        ''', (message_id, chat_id, user_id, username, text, datetime.now(), llm_result))
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (message_id, chat_id, user_id, username, text, datetime.now(), llm_result))
        conn.commit()
        conn.close()

def update_admin_decision(message_id: int, decision: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from database import execute_query
        execute_query('''
            UPDATE messages 
            SET admin_decision = ?, admin_decided_at = ?
            WHERE message_id = ?
        ''', (decision, datetime.now(), message_id))
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE messages 
            SET admin_decision = ?, admin_decided_at = ?
            WHERE message_id = ?
        ''', (decision, datetime.now(), message_id))
        conn.commit()
        conn.close()

def add_training_example(text: str, is_spam: bool, source: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from database import execute_query
        execute_query('''
            INSERT INTO training_examples (text, is_spam, source, created_at)
            VALUES (?, ?, ?, ?)
        ''', (text, is_spam, source, datetime.now()))
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO training_examples (text, is_spam, source, created_at)
            VALUES (?, ?, ?, ?)
        ''', (text, is_spam, source, datetime.now()))
        conn.commit()
        conn.close()

def get_current_prompt():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    try:
        from database import execute_query
        result = execute_query("SELECT prompt_text FROM prompts WHERE is_active = TRUE ORDER BY version DESC LIMIT 1", fetch='one')
        prompt = result[0] if result else SPAM_CHECK_PROMPT
        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î: {prompt[200:300]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return prompt
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î: {e}")
        # Fallback –∫ SQLite —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
        try:
            conn = sqlite3.connect('antispam.db')
            cursor = conn.cursor()
            cursor.execute("SELECT prompt_text FROM prompts WHERE is_active = TRUE ORDER BY version DESC LIMIT 1")
            result = cursor.fetchone()
            conn.close()
            prompt = result[0] if result else SPAM_CHECK_PROMPT
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é fallback SQLite –ø—Ä–æ–º–ø—Ç: {prompt[200:300]}...")
            return prompt
        except Exception as e2:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback: {e2}")
            logger.info("üìù –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
            return SPAM_CHECK_PROMPT

def save_new_prompt(prompt_text: str, reason: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç"""
    try:
        from database import execute_query
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        execute_query("UPDATE prompts SET is_active = FALSE")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
        result = execute_query("SELECT COALESCE(MAX(version), 0) + 1 FROM prompts", fetch='one')
        next_version = result[0] if result else 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        execute_query('''
            INSERT INTO prompts (prompt_text, version, created_at, is_active, improvement_reason)
            VALUES (?, ?, ?, TRUE, ?)
        ''', (prompt_text, next_version, datetime.now(), reason))
        
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–≤–µ—Ä—Å–∏—è {next_version}): {reason}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        
        # Fallback –∫ SQLite
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        
        cursor.execute("UPDATE prompts SET is_active = FALSE")
        cursor.execute("SELECT COALESCE(MAX(version), 0) + 1 FROM prompts")
        next_version = cursor.fetchone()[0]
        
        cursor.execute('''
            INSERT INTO prompts (prompt_text, version, created_at, is_active, improvement_reason)
            VALUES (?, ?, ?, TRUE, ?)
        ''', (prompt_text, next_version, datetime.now(), reason))
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ fallback (–≤–µ—Ä—Å–∏—è {next_version}): {reason}")

def get_recent_mistakes(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    try:
        from database import execute_query
        mistakes = execute_query('''
            SELECT text, llm_result, admin_decision, created_at
            FROM messages 
            WHERE admin_decision IS NOT NULL 
            AND ((llm_result = '–ù–ï_–°–ü–ê–ú' AND admin_decision = '–°–ü–ê–ú') 
                 OR (llm_result IN ('–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú') AND admin_decision = '–ù–ï_–°–ü–ê–ú'))
            ORDER BY admin_decided_at DESC 
            LIMIT ?
        ''', (limit,), fetch='all')
        return mistakes or []
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT text, llm_result, admin_decision, created_at
            FROM messages 
            WHERE admin_decision IS NOT NULL 
            AND ((llm_result = '–ù–ï_–°–ü–ê–ú' AND admin_decision = '–°–ü–ê–ú') 
                 OR (llm_result IN ('–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú') AND admin_decision = '–ù–ï_–°–ü–ê–ú'))
            ORDER BY admin_decided_at DESC 
            LIMIT ?
        ''', (limit,))
        mistakes = cursor.fetchall()
        conn.close()
        return mistakes

def parse_llm_response(response_text: str) -> SpamResult:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM"""
    cleaned = re.sub(r'[^\w\s_]', '', response_text.strip().upper())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    maybe_spam_keywords = [
        '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û –°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û–°–ü–ê–ú', 
        'MAYBE_SPAM', 'MAYBE SPAM', 'MAYBE–°–ü–ê–ú',
        '–í–û–ó–ú–û', '–í–û–ó–ú–û–ñ'  # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    ]
    not_spam_keywords = [
        '–ù–ï_–°–ü–ê–ú', '–ù–ï –°–ü–ê–ú', '–ù–ï–°–ü–ê–ú', 
        'NOT_SPAM', 'NOT SPAM', 'NOTSPAM',
        '–ù–ï_–°–ü', '–ù–ï_–°'  # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    ]
    spam_keywords = ['–°–ü–ê–ú', 'SPAM']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞
    if cleaned in ['–°–ü–ê–ú', 'SPAM']:
        return SpamResult.SPAM
    elif cleaned in ['–ù–ï_–°–ü–ê–ú', '–ù–ï –°–ü–ê–ú', '–ù–ï–°–ü–ê–ú', 'NOT_SPAM', 'NOT SPAM', 'NOTSPAM']:
        return SpamResult.NOT_SPAM
    elif cleaned in ['–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û –°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û–°–ü–ê–ú', 'MAYBE_SPAM', 'MAYBE SPAM']:
        return SpamResult.MAYBE_SPAM
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if any(keyword in cleaned for keyword in maybe_spam_keywords):
        return SpamResult.MAYBE_SPAM
    elif any(keyword in cleaned for keyword in not_spam_keywords):
        return SpamResult.NOT_SPAM
    elif any(keyword in cleaned for keyword in spam_keywords):
        return SpamResult.SPAM
    
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç LLM: '{response_text}' (–æ—á–∏—â–µ–Ω–Ω—ã–π: '{cleaned}')")
    return SpamResult.MAYBE_SPAM

async def improve_prompt_with_ai(mistakes):
    """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫"""
    current_prompt = get_current_prompt()
    
    mistakes_text = ""
    for text, bot_decision, admin_decision, created_at in mistakes:
        mistakes_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{text}'\n–ë–æ—Ç —Ä–µ—à–∏–ª: {bot_decision}\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {admin_decision}\n\n"
    
    improvement_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞ –≤ Telegram.

–¢–ï–ö–£–©–ò–ô –ü–†–û–ú–ü–¢:
{current_prompt}

–û–®–ò–ë–ö–ò –ë–û–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):
{mistakes_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∏ –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –±–æ—Ç –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª—è–ª —Å–ø–∞–º. 
–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞), –Ω–æ –¥–æ–±–∞–≤—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫.

–û–¢–í–ï–¢–¨ –¢–û–õ–¨–ö–û –£–õ–£–ß–®–ï–ù–ù–´–ú –ü–†–û–ú–ü–¢–û–ú, –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –û–ë–™–Ø–°–ù–ï–ù–ò–ô:
"""
    
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4 –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            messages=[{"role": "user", "content": improvement_prompt}],
            max_tokens=1000,
            temperature=0.3,
            timeout=30
        )
        
        improved_prompt = response.choices[0].message.content.strip()
        logger.info("–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω —á–µ—Ä–µ–∑ AI")
        return improved_prompt
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return None

async def check_message_with_llm(message_text: str) -> SpamResult:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM"""
    current_prompt = get_current_prompt()
    prompt = current_prompt.format(message_text=message_text)
    
    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ ChatGPT: '{message_text[:50]}...'")
    logger.debug(f"üìù –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")
    
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            temperature=0,
            timeout=10
        )
        
        llm_answer = response.choices[0].message.content.strip()
        result = parse_llm_response(llm_answer)
        
        logger.info(f"üéØ ChatGPT –æ—Ç–≤–µ—Ç–∏–ª: '{llm_answer}' (–¥–ª–∏–Ω–∞: {len(llm_answer)}) ‚Üí {result.value}")
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if len(llm_answer) < 3:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: '{llm_answer}'")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM: {e}")
        return SpamResult.MAYBE_SPAM

async def send_suspicious_message_to_admin(message: types.Message, result: SpamResult):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    result_emoji = "üî¥" if result == SpamResult.SPAM else "üü°"
    
    admin_text = f"""{result_emoji} <b>{result.value}</b>

<b>–û—Ç:</b> {message.from_user.full_name} (@{message.from_user.username or '–Ω–µ—Ç username'})
<b>–ì—Ä—É–ø–ø–∞:</b> {message.chat.title}
<b>–í—Ä–µ–º—è:</b> {message.date.strftime('%H:%M:%S')}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{message.text}</code>"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –°–ü–ê–ú", callback_data=f"spam_{message.message_id}"),
            InlineKeyboardButton(text="üü¢ –ù–ï –°–ü–ê–ú", callback_data=f"not_spam_{message.message_id}")
        ]
    ])
    
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
        logger.info(f"üîò –ö–Ω–æ–ø–∫–∏: spam_{message.message_id}, not_spam_{message.message_id}")
        
        sent_message = await bot.send_message(
            ADMIN_ID, 
            admin_text, 
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É (ID: {sent_message.message_id})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")


async def analyze_bot_error(message_text: str, error_type: str):
    """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT"""
    if not openai_client:
        logger.error("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None, None
        
    current_prompt = get_current_prompt()
    logger.info(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É —Ç–∏–ø–∞ '{error_type}' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{message_text[:50]}...'")
    
    if error_type == "missed_spam":
        analysis_prompt = f"""–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–ø–∞–º –≤ Telegram. –í–æ—Ç –æ–Ω:

{current_prompt}

–ù–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –ù–ï –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º, —Ö–æ—Ç—è —ç—Ç–æ —Å–ø–∞–º:
"{message_text}"

–ü–æ—á–µ–º—É —Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ —Å–ø–∞–º? 

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –Ω—É–ª—è! –î–û–ü–û–õ–ù–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞–Ω–∏—è.

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –°–ü–ê–ú.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–ù–ê–õ–ò–ó: [–ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏]
–î–û–ü–û–õ–ù–ï–ù–ò–ï_–ö_–ö–†–ò–¢–ï–†–ò–Ø–ú: [—á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –∑–∞–º–µ–Ω—è—è –∏—Ö]"""

    elif error_type == "uncertain_spam":
        analysis_prompt = f"""–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–ø–∞–º –≤ Telegram. –í–æ—Ç –æ–Ω:

{current_prompt}

–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú, –Ω–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –°–ü–ê–ú:
"{message_text}"

–ü–æ—á–µ–º—É —Ç—ã –±—ã–ª –Ω–µ—É–≤–µ—Ä–µ–Ω? 

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –Ω—É–ª—è! –î–û–ü–û–õ–ù–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞–Ω–∏—è.

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –°–ü–ê–ú.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–ù–ê–õ–ò–ó: [–ø–æ—á–µ–º—É –±—ã–ª –Ω–µ—É–≤–µ—Ä–µ–Ω]
–î–û–ü–û–õ–ù–ï–ù–ò–ï_–ö_–ö–†–ò–¢–ï–†–ò–Ø–ú: [—á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –Ω–µ –∑–∞–º–µ–Ω—è—è –∏—Ö]"""

    else:  # false_positive
        analysis_prompt = f"""–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–ø–∞–º –≤ Telegram. –í–æ—Ç –æ–Ω:

{current_prompt}

–ù–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º, —Ö–æ—Ç—è —ç—Ç–æ –ù–ï —Å–ø–∞–º:
"{message_text}"

–ü–æ—á–µ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ —Å–ø–∞–º?

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –Ω—É–ª—è! –î–û–ü–û–õ–ù–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º.

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –ù–ï —Å—á–∏—Ç–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∞–º–æ–º.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–ù–ê–õ–ò–ó: [–ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏]
–î–û–ü–û–õ–ù–ï–ù–ò–ï_–ö_–ö–†–ò–¢–ï–†–ò–Ø–ú: [—á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∫—Ä–∏—Ç–µ—Ä–∏—è–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–∫–∏—Ö –æ—à–∏–±–æ–∫]"""

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": analysis_prompt}],
            max_tokens=1500,
            temperature=0.3,
            timeout=30
        )
        
        analysis = response.choices[0].message.content.strip()
        logger.info(f"üß† ChatGPT –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –æ—à–∏–±–∫—É: {analysis[:100]}...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if "–£–õ–£–ß–®–ï–ù–ù–´–ï_–ö–†–ò–¢–ï–†–ò–ò:" in analysis:
            improved_criteria = analysis.split("–£–õ–£–ß–®–ï–ù–ù–´–ï_–ö–†–ò–¢–ï–†–ò–ò:")[1].strip()
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏
            improved_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

{improved_criteria}

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{{message_text}}¬ª

–û—Ç–≤–µ—Ç:"""
            
            return analysis, improved_prompt
            
        elif "–î–û–ü–û–õ–ù–ï–ù–ò–ï_–ö_–ö–†–ò–¢–ï–†–ò–Ø–ú:" in analysis:
            # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - –¥–æ–ø–æ–ª–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            addition = analysis.split("–î–û–ü–û–õ–ù–ï–ù–ò–ï_–ö_–ö–†–ò–¢–ï–†–ò–Ø–ú:")[1].strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            current_criteria_start = current_prompt.find("–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏")
            current_criteria_end = current_prompt.find("–°–æ–æ–±—â–µ–Ω–∏–µ:")
            
            if current_criteria_start != -1 and current_criteria_end != -1:
                existing_criteria = current_prompt[current_criteria_start:current_criteria_end].strip()
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                improved_criteria = f"{existing_criteria}\n\n{addition}"
            else:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–≤–ª–µ—á—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                improved_criteria = f"–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏:\n{addition}"
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            improved_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

{improved_criteria}

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{{message_text}}¬ª

–û—Ç–≤–µ—Ç:"""
            
            return analysis, improved_prompt
        
        return analysis, None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None, None

@dp.message(F.content_type == 'text', F.forward_from)
async def handle_forwarded_spam(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–ø–∞–º–∞ (–æ—à–∏–±–∫–∏ –±–æ—Ç–∞)"""
    if message.from_user.id != ADMIN_ID:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞
    add_training_example(message.text, True, 'FORWARDED_MISTAKE')
    
    await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, –ø–æ—á–µ–º—É –±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–ª —ç—Ç–æ—Ç —Å–ø–∞–º...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ ChatGPT
    analysis, improved_prompt = await analyze_bot_error(message.text, "missed_spam")
    
    if improved_prompt:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_prompt"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_prompt"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_prompt")
            ]
        ])
        
        prompt_message = f"""ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>

{analysis}

<b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> "{message.text}"

<code>{improved_prompt}</code>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        global pending_prompt
        pending_prompt = improved_prompt
        
        await bot.send_message(ADMIN_ID, prompt_message, reply_markup=keyboard, parse_mode='HTML')
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞!

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    start_text = """ü§ñ <b>Kill Yr Spammers</b> - —É–º–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç!

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
‚Ä¢ –£—á—É—Å—å –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –∏ —É–ª—É—á—à–∞—é—Å—å
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)
/editprompt - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç (–∞–¥–º–∏–Ω)
/groups - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∞–¥–º–∏–Ω)

üí° <b>–î–ª—è –æ–±—É—á–µ–Ω–∏—è:</b> –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º–∞"""
    
    await message.reply(start_text, parse_mode='HTML')

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    help_text = """üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Kill Yr Spammers</b>

üîπ <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîπ <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/editprompt - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
/groups - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞

üéØ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ ChatGPT
2Ô∏è‚É£ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
3Ô∏è‚É£ –£—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö (–°–ü–ê–ú/–ù–ï –°–ü–ê–ú)
4Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ—Ç —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç

üí° <b>–û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞:</b>
‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º–∞ –±–æ—Ç—É –≤ –ª–∏—á–∫—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ API –∑–∞—â–∏—â–µ–Ω –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    await message.reply(help_text, parse_mode='HTML')

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    try:
        from database import execute_query
        total_messages = execute_query("SELECT COUNT(*) FROM messages", fetch='one')[0]
        spam_count = execute_query("SELECT COUNT(*) FROM messages WHERE llm_result = '–°–ü–ê–ú'", fetch='one')[0]
        maybe_spam_count = execute_query("SELECT COUNT(*) FROM messages WHERE llm_result = '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú'", fetch='one')[0]
        reviewed_count = execute_query("SELECT COUNT(*) FROM messages WHERE admin_decision IS NOT NULL", fetch='one')[0]
        training_count = execute_query("SELECT COUNT(*) FROM training_examples", fetch='one')[0]
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM messages")
        total_messages = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE llm_result = '–°–ü–ê–ú'")
        spam_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE llm_result = '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú'")
        maybe_spam_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE admin_decision IS NOT NULL")
        reviewed_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM training_examples")
        training_count = cursor.fetchone()[0]
        
        conn.close()
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–∞</b>

üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
üî¥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º: {spam_count}
üü° –í–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞–º: {maybe_spam_count}
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º: {reviewed_count}
üß† –ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {training_count}"""
    
    await message.reply(stats_text, parse_mode='HTML')

@dp.message(Command("editprompt"))
async def edit_prompt_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /editprompt –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    from database import set_bot_state
    set_bot_state(ADMIN_ID, awaiting_prompt_edit=True)
    
    global awaiting_prompt_edit
    awaiting_prompt_edit = True
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î –∏ –ø–∞–º—è—Ç–∏")
    
    current_prompt = get_current_prompt()
    edit_message = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞</b>

<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>
<code>{current_prompt}</code>

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.</b> –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –¢—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –°–ü–ê–ú, –ù–ï_–°–ü–ê–ú, –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú
‚Ä¢ –ú–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: {{message_text}}

–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel"""
    
    await message.reply(edit_message, parse_mode='HTML')

@dp.message(Command("groups"))
async def show_allowed_groups(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    groups_text = "üîê <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n\n"
    for group_id in ALLOWED_GROUP_IDS:
        groups_text += f"‚Ä¢ ID: <code>{group_id}</code>\n"
    
    groups_text += f"\n<b>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø:</b> {len(ALLOWED_GROUP_IDS)}"
    groups_text += "\n\nüí° –¢–æ–ª—å–∫–æ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API OpenAI"
    
    await message.reply(groups_text, parse_mode='HTML')

@dp.message(Command("cancel"))
async def cancel_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global awaiting_prompt_edit
    
    if message.from_user.id != ADMIN_ID:
        return
    
    if awaiting_prompt_edit:
        awaiting_prompt_edit = False
        await message.reply("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


@dp.message(F.text & (F.chat.type == "private"))
async def handle_admin_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –õ–ò–ß–ö–ï (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è)"""
    global awaiting_prompt_edit, pending_prompt
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id != ADMIN_ID:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if message.text and message.text.startswith('/'):
        return
    
    logger.info(f"üîç handle_admin_text –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: '{message.text[:50]}...'")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
    from database import get_bot_state, set_bot_state
    db_awaiting_edit, db_pending_prompt = get_bot_state(ADMIN_ID)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    awaiting_prompt_edit = db_awaiting_edit
    pending_prompt = db_pending_prompt
    
    logger.info(f"handle_admin_text: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î awaiting_prompt_edit = {awaiting_prompt_edit}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if awaiting_prompt_edit:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–º–ø—Ç–∞
        if "{message_text}" not in message.text:
            await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {message_text} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        required_words = ["–°–ü–ê–ú", "–ù–ï_–°–ü–ê–ú", "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"]
        if not all(word in message.text.upper() for word in required_words):
            await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –°–ü–ê–ú, –ù–ï_–°–ü–ê–ú, –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ (–¥–ª–∏–Ω–∞: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        save_new_prompt(message.text, "–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
        set_bot_state(ADMIN_ID, awaiting_prompt_edit=False)
        awaiting_prompt_edit = False
        pending_prompt = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø—Ä–æ–º–ø—Ç–µ
        try:
            from database import execute_query
            result = execute_query("SELECT version, improvement_reason, created_at FROM prompts WHERE is_active = TRUE", fetch='one')
        except:
            conn = sqlite3.connect('antispam.db')
            cursor = conn.cursor()
            cursor.execute("SELECT version, improvement_reason, created_at FROM prompts WHERE is_active = TRUE")
            result = cursor.fetchone()
            conn.close()
        
        if result:
            version, reason, created_at = result
            new_prompt_info = f"‚úÖ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\nüìù <b>–í–µ—Ä—Å–∏—è {version}</b>\n\n<code>{message.text}</code>\n\n<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {reason}\n<b>–î–∞—Ç–∞:</b> {created_at}"
        else:
            new_prompt_info = f"‚úÖ <b>–ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n<code>{message.text}</code>"
        
        await message.reply(new_prompt_info, parse_mode='HTML')
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return

@dp.message(F.content_type == 'text')
async def handle_message(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"üîç –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: –æ—Ç {message.from_user.id} (@{message.from_user.username}) –≤ —á–∞—Ç–µ '{message.chat.title}' (—Ç–∏–ø: {message.chat.type}, ID: {message.chat.id})")
    logger.info(f"üìù –¢–µ–∫—Å—Ç: '{message.text[:100]}...'")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    if message.from_user.is_bot:
        logger.info("ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
        return
    
    # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
    if message.chat.type == 'private':
        if message.from_user.id != ADMIN_ID:
            return  # –ù–µ –∞–¥–º–∏–Ω - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if not message.forward_from and not message.forward_from_chat:
            return  # –ê–¥–º–∏–Ω, –Ω–æ –ù–ï –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    elif message.chat.type in ['group', 'supergroup']:
        if message.chat.id not in ALLOWED_GROUP_IDS:
            logger.warning(f"üö´ –ì–†–£–ü–ü–ê –ù–ï –í –ë–ï–õ–û–ú –°–ü–ò–°–ö–ï: {message.chat.title} (ID: {message.chat.id}) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
        
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ LLM
    spam_result = await check_message_with_llm(message.text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_message_to_db(message, spam_result)
    
    # –î—É–±–ª–∏—Ä—É–µ–º –≤ backup —Ñ–∞–π–ª
    try:
        from backup_messages import backup_message
        backup_message({
            "message_id": message.message_id,
            "chat_id": message.chat.id,
            "user_id": message.from_user.id,
            "username": message.from_user.username or "",
            "text": message.text,
            "llm_result": spam_result.value
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ backup: {e}")
    
    # –ï—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    if spam_result in [SpamResult.SPAM, SpamResult.MAYBE_SPAM]:
        logger.info(f"üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({spam_result.value}), –æ—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω—É...")
        await send_suspicious_message_to_admin(message, spam_result)
    else:
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ ({spam_result.value}), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω—É")

@dp.callback_query(F.data.startswith("spam_") | F.data.startswith("not_spam_"))
async def handle_admin_feedback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        logger.warning(f"‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ –æ—Ç {callback.from_user.id}")
        return
    
    if callback.data.startswith("not_spam_"):
        action = "not_spam"
        message_id = int(callback.data.replace("not_spam_", ""))
    elif callback.data.startswith("spam_"):
        action = "spam"
        message_id = int(callback.data.replace("spam_", ""))
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
    
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: action={action}, message_id={message_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç LLM –∏–∑ –ë–î
    try:
        from database import execute_query
        result = execute_query("SELECT text, llm_result FROM messages WHERE message_id = ?", (message_id,), fetch='one')
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT text, llm_result FROM messages WHERE message_id = ?", (message_id,))
        result = cursor.fetchone()
        conn.close()
    
    if not result:
        logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–∞–º–æ–≥–æ callback
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è callback
            original_text = callback.message.text
            if "–°–æ–æ–±—â–µ–Ω–∏–µ:" in original_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É <code> —Ç–µ–≥–∞–º–∏
                import re
                code_match = re.search(r'<code>(.*?)</code>', original_text, re.DOTALL)
                if code_match:
                    message_text = code_match.group(1).strip()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º llm_result –∏–∑ —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    if "üî¥" in original_text:
                        llm_result = "–°–ü–ê–ú"
                    elif "üü°" in original_text:
                        llm_result = "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"
                    else:
                        llm_result = "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                    save_message_to_db_direct(message_id, 0, 0, "unknown", message_text, llm_result)
                    
                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ callback: '{message_text[:50]}...'")
                    result = (message_text, llm_result)
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return
            else:
                await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
    
    message_text, llm_result = result
    decision = "–°–ü–ê–ú" if action == "spam" else "–ù–ï_–°–ü–ê–ú"
    is_spam = (action == "spam")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    update_admin_decision(message_id, decision)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    add_training_example(message_text, is_spam, 'ADMIN_FEEDBACK')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    decision_emoji = "‚ùå" if is_spam else "‚úÖ"
    new_text = f"{callback.message.text}\n\n{decision_emoji} <b>–†–µ—à–µ–Ω–∏–µ: {decision}</b>"
    
    await callback.message.edit_text(new_text, parse_mode='HTML')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: action={action}, llm_result={llm_result}")
    
    needs_learning = False
    error_type = None
    
    if action == "not_spam" and llm_result in ['–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú']:
        needs_learning = True
        error_type = "false_positive"
    elif action == "spam" and llm_result == '–ù–ï_–°–ü–ê–ú':
        needs_learning = True
        error_type = "missed_spam"
    elif action == "spam" and llm_result == '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú':
        needs_learning = True
        error_type = "uncertain_spam"
    
    if needs_learning:
        logger.info(f"üö® –ó–∞–ø—É—Å–∫–∞—é –æ–±—É—á–µ–Ω–∏–µ! –¢–∏–ø: {error_type}")
        await callback.answer(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ {decision}. –£–ª—É—á—à–∞—é –ø—Ä–æ–º–ø—Ç...")
        
        logger.info(f"üìä –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {error_type}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ ChatGPT
        try:
            analysis, improved_prompt = await analyze_bot_error(message_text, error_type)
            logger.info(f"üß† –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: analysis={analysis is not None}, prompt={improved_prompt is not None}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ analyze_bot_error: {e}")
            analysis, improved_prompt = None, None
        
        if improved_prompt:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_prompt"),
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_prompt"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_prompt")
                ]
            ])
            
            global pending_prompt
            pending_prompt = improved_prompt
            
            error_description = "–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º" if error_type == "false_positive" else "–ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–ø–∞–º"
            
            prompt_message = f"""ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞:</b>

<b>–û—à–∏–±–∫–∞:</b> –ë–æ—Ç {error_description}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> "{message_text}"

{analysis}

<code>{improved_prompt}</code>"""
            
            await bot.send_message(ADMIN_ID, prompt_message, reply_markup=keyboard, parse_mode='HTML')
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            await bot.send_message(ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'\n–û—à–∏–±–∫–∞: {error_type}")
    else:
        logger.info(f"‚ÑπÔ∏è –ù–µ –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: action={action}, llm_result={llm_result}")
        await callback.answer(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ {decision}")

@dp.callback_query(F.data.in_(["apply_prompt", "edit_prompt", "reject_prompt", "edit_current_prompt"]))
async def handle_prompt_management(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    global pending_prompt, awaiting_prompt_edit
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if callback.data == "apply_prompt":
        if pending_prompt:
            save_new_prompt(pending_prompt, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫")
            await callback.message.edit_text(
                f"{callback.message.text}\n\n‚úÖ <b>–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω!</b>",
                parse_mode='HTML'
            )
            await callback.answer("‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            pending_prompt = None
        else:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
    
    elif callback.data == "edit_prompt" or callback.data == "edit_current_prompt":
        awaiting_prompt_edit = True
        
        if callback.data == "edit_current_prompt":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            current_prompt = get_current_prompt()
            edit_message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞</b>\n\n<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n<code>{current_prompt}</code>\n\n"
        else:
            edit_message = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞</b>\n\n"
        
        edit_message += """–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –¢—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –°–ü–ê–ú, –ù–ï_–°–ü–ê–ú, –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú
‚Ä¢ –ú–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}

–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"""
        
        await callback.message.reply(edit_message, parse_mode='HTML')
        await callback.answer("‚úèÔ∏è –ñ–¥—É –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
    
    elif callback.data == "reject_prompt":
        pending_prompt = None
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå <b>–ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>",
            parse_mode='HTML'
        )
        await callback.answer("‚ùå –ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global openai_client, bot
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if not OPENAI_API_KEY:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if ADMIN_ID == 0:
        logger.error("‚ùå ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    try:
        bot = Bot(token=BOT_TOKEN)
        logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
    try:
        openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    from database import init_database as db_init
    db_init()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ backup —Ñ–∞–π–ª–∞
    try:
        from backup_messages import restore_messages_from_backup
        restored_count = restore_messages_from_backup()
        if restored_count > 0:
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ backup")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backup: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        BotCommand(command="start", description="ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand(command="help", description="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand(command="editprompt", description="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand(command="groups", description="üîê –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∞–¥–º–∏–Ω)"),
        BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–¥–º–∏–Ω)")
    ]
    
    try:
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
    
    logger.info("ü§ñ Kill Yr Spammers –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_ID}")
    logger.info(f"üîê –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(ALLOWED_GROUP_IDS)}")
    
    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    if not os.getenv("RAILWAY_ENVIRONMENT"):
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º —Å Railway –±–æ—Ç–æ–º!")
        print("üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Railway –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
    
    asyncio.run(main())
