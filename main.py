import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram import F
import sqlite3
import re
from enum import Enum
from openai import AsyncOpenAI
from config import BOT_TOKEN, OPENAI_API_KEY, ADMIN_ID, ALLOWED_GROUP_IDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
pending_prompt = None
awaiting_prompt_edit = False
openai_client = None

class SpamResult(Enum):
    SPAM = "–°–ü–ê–ú"
    NOT_SPAM = "–ù–ï_–°–ü–ê–ú"  
    MAYBE_SPAM = "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"

# –°–¢–ê–†–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê –£–î–ê–õ–ï–ù–ê - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –ë–î!

# –°–¢–ê–†–ê–Ø –§–£–ù–ö–¶–ò–Ø init_database –£–î–ê–õ–ï–ù–ê - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ database.py

def save_message_to_db(message: types.Message, llm_result: SpamResult = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from database import execute_query
        execute_query('''
            INSERT INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT (message_id) DO UPDATE SET
            llm_result = EXCLUDED.llm_result
        ''', (
            message.message_id,
            message.chat.id,
            message.from_user.id,
            message.from_user.username or '',
            message.text,
            datetime.now(),
            llm_result.value if llm_result else None
        ))
    except:
        # Fallback –∫ SQLite
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            message.message_id,
            message.chat.id,
            message.from_user.id,
            message.from_user.username or '',
            message.text,
            datetime.now(),
            llm_result.value if llm_result else None
        ))
        conn.commit()
        conn.close()

def save_message_to_db_direct(message_id: int, chat_id: int, user_id: int, username: str, text: str, llm_result: str):
    """–ü—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)"""
    try:
        from database import execute_query
        execute_query('''
            INSERT INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
            ON CONFLICT (message_id) DO UPDATE SET
            llm_result = EXCLUDED.llm_result
        ''', (message_id, chat_id, user_id, username, text, datetime.now(), llm_result))
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO messages 
            (message_id, chat_id, user_id, username, text, created_at, llm_result)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (message_id, chat_id, user_id, username, text, datetime.now(), llm_result))
        conn.commit()
        conn.close()

def update_admin_decision(message_id: int, decision: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from database import execute_query
        execute_query('''
            UPDATE messages 
            SET admin_decision = ?, admin_decided_at = ?
            WHERE message_id = ?
        ''', (decision, datetime.now(), message_id))
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE messages 
            SET admin_decision = ?, admin_decided_at = ?
            WHERE message_id = ?
        ''', (decision, datetime.now(), message_id))
        conn.commit()
        conn.close()

def add_training_example(text: str, is_spam: bool, source: str):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from database import execute_query
        execute_query('''
            INSERT INTO training_examples (text, is_spam, source, created_at)
            VALUES (?, ?, ?, ?)
        ''', (text, is_spam, source, datetime.now()))
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO training_examples (text, is_spam, source, created_at)
            VALUES (?, ?, ?, ?)
        ''', (text, is_spam, source, datetime.now()))
        conn.commit()
        conn.close()

def get_current_prompt():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—É–¥–∞ –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç
    logger.info("üîç –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
    
    try:
        from database import execute_query
        result = execute_query("SELECT prompt_text, improvement_reason FROM current_prompt ORDER BY id DESC LIMIT 1", fetch='one')
        
        if result:
            prompt, reason = result
            logger.info(f"üìñ –ó–ê–ì–†–£–ñ–ï–ù –ü–†–û–ú–ü–¢ –ò–ó POSTGRESQL:")
            logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            logger.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –ø—É–Ω–∫—Ç—ã 1-5: {'1.' in prompt and '2.' in prompt and '3.' in prompt}")
            logger.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {'–ò—Å–∫–ª—é—á–µ–Ω–∏—è' in prompt}")
            logger.info(f"   –°–µ—Ä–µ–¥–∏–Ω–∞: {prompt[200:400]}...")
            return prompt
        else:
            logger.error("‚ùå –ü–†–û–ú–ü–¢ –ù–ï –ù–ê–ô–î–ï–ù –í POSTGRESQL!")
            
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê POSTGRESQL: {e}")
    
    # Fallback –∫ SQLite —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
    logger.warning("‚ö†Ô∏è –ü–ï–†–ï–•–û–î –ö SQLITE FALLBACK")
    try:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT prompt_text, improvement_reason FROM current_prompt ORDER BY id DESC LIMIT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            prompt, reason = result
            logger.warning(f"‚ö†Ô∏è –ó–ê–ì–†–£–ñ–ï–ù –ü–†–û–ú–ü–¢ –ò–ó SQLITE:")
            logger.warning(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            logger.warning(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –ø—É–Ω–∫—Ç—ã 1-5: {'1.' in prompt and '2.' in prompt and '3.' in prompt}")
            logger.warning(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {'–ò—Å–∫–ª—é—á–µ–Ω–∏—è' in prompt}")
            return prompt
        else:
            logger.error("‚ùå –ü–†–û–ú–ü–¢ –ù–ï –ù–ê–ô–î–ï–ù –î–ê–ñ–ï –í SQLITE!")
            
    except Exception as e2:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê SQLITE: {e2}")
    
    logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–ï–¢ –ü–†–û–ú–ü–¢–ê –í –ë–î!")
    logger.error("üö® –°–û–ó–î–ê–Æ –ê–í–ê–†–ò–ô–ù–´–ô –ü–†–û–ú–ü–¢ –° –ë–ê–ó–û–í–û–ô –°–¢–†–£–ö–¢–£–†–û–ô")
    
    # –°–æ–∑–¥–∞–µ–º –ê–ö–¢–£–ê–õ–¨–ù–´–ô –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    emergency_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏: 

1. –ë–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ 
2. –ü—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º.
3. –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç–º–æ–¥–∑–∏ üíò/üíù/üëÑ –∏ –ø–æ–¥–æ–±–Ω—ã–µ –∏–º.
4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏
5. –ù–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.
6. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ –¥–ª—è —ç–º–æ—Ü–∏–π, –∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å–ø–∞–º, –Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥—É–º–∞—Ç—å, —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è:

- –ù–µ —Å—á–∏—Ç–∞–π —Å–ø–∞–º–æ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –Ω–æ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–∞–π—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–ø–∞–º–∞, —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ª–æ.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –ë–î
    try:
        save_new_prompt(emergency_prompt, "–ê–í–ê–†–ò–ô–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï")
        logger.info("‚úÖ –ê–≤–∞—Ä–∏–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {e}")
    
    return emergency_prompt

def save_new_prompt(prompt_text: str, reason: str):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç (–∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π) –í–ï–ó–î–ï"""
    logger.info(f"üíæ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–£–Æ –ü–†–û–ú–ü–¢ –í–û –í–°–ï–• –ë–ê–ó–ê–•:")
    logger.info(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    logger.info(f"   –î–ª–∏–Ω–∞: {len(prompt_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    postgresql_success = False
    sqlite_success = False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
    try:
        from database import execute_query
        
        execute_query("DELETE FROM current_prompt")
        execute_query('''
            INSERT INTO current_prompt (prompt_text, updated_at, improvement_reason)
            VALUES (?, ?, ?)
        ''', (prompt_text, datetime.now(), reason))
        
        postgresql_success = True
        logger.info("‚úÖ –ü–†–û–ú–ü–¢ –°–û–•–†–ê–ù–ï–ù –í POSTGRESQL")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í POSTGRESQL: {e}")
    
    # –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite (–Ω–µ —Ç–æ–ª—å–∫–æ fallback)
    try:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        
        cursor.execute("DELETE FROM current_prompt")
        cursor.execute('''
            INSERT INTO current_prompt (prompt_text, updated_at, improvement_reason)
            VALUES (?, ?, ?)
        ''', (prompt_text, datetime.now(), reason))
        
        conn.commit()
        conn.close()
        
        sqlite_success = True
        logger.info("‚úÖ –ü–†–û–ú–ü–¢ –°–û–•–†–ê–ù–ï–ù –í SQLITE")
        
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –í SQLITE: {e}")
    
    # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if postgresql_success and sqlite_success:
        logger.info("üéØ –ü–†–û–ú–ü–¢ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù –í–û –í–°–ï–• –ë–ê–ó–ê–•")
    elif postgresql_success:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –≤ PostgreSQL")
    elif sqlite_success:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –≤ SQLite")
    else:
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–º–ø—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ù–ò–ì–î–ï!")

async def verify_and_report_prompt_sync(expected_prompt: str, admin_id: int):
    """–†–µ–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ —á–∞—Ç"""
    
    report = "üìä <b>–ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ü–†–û–ú–ü–¢–ê:</b>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    postgresql_prompt = None
    try:
        from database import execute_query
        result = execute_query("SELECT prompt_text FROM current_prompt ORDER BY id DESC LIMIT 1", fetch='one')
        if result:
            postgresql_prompt = result[0]
            if postgresql_prompt == expected_prompt:
                report += "üóÑÔ∏è <b>PostgreSQL:</b> ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù\n"
            else:
                report += "üóÑÔ∏è <b>PostgreSQL:</b> ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢\n"
        else:
            report += "üóÑÔ∏è <b>PostgreSQL:</b> ‚ùå –ù–ï –ù–ê–ô–î–ï–ù\n"
            postgresql_prompt = "–ù–ï –ù–ê–ô–î–ï–ù"
    except Exception as e:
        report += f"üóÑÔ∏è <b>PostgreSQL:</b> ‚ùå –û–®–ò–ë–ö–ê - {e}\n"
        postgresql_prompt = f"–û–®–ò–ë–ö–ê: {e}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite
    sqlite_prompt = None
    try:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT prompt_text FROM current_prompt ORDER BY id DESC LIMIT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            sqlite_prompt = result[0]
            if sqlite_prompt == expected_prompt:
                report += "üíæ <b>SQLite:</b> ‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù\n"
            else:
                report += "üíæ <b>SQLite:</b> ‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢\n"
        else:
            report += "üíæ <b>SQLite:</b> ‚ùå –ù–ï –ù–ê–ô–î–ï–ù\n"
            sqlite_prompt = "–ù–ï –ù–ê–ô–î–ï–ù"
    except Exception as e:
        report += f"üíæ <b>SQLite:</b> ‚ùå –û–®–ò–ë–ö–ê - {e}\n"
        sqlite_prompt = f"–û–®–ò–ë–ö–ê: {e}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_current_prompt()
    try:
        current_prompt = get_current_prompt()
        if current_prompt == expected_prompt:
            report += "üéØ <b>get_current_prompt():</b> ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–´–ô\n"
        else:
            report += "üéØ <b>get_current_prompt():</b> ‚ùå –í–û–ó–í–†–ê–©–ê–ï–¢ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô\n"
    except Exception as e:
        report += f"üéØ <b>get_current_prompt():</b> ‚ùå –û–®–ò–ë–ö–ê - {e}\n"
        current_prompt = f"–û–®–ò–ë–ö–ê: {e}"
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    all_synced = (
        postgresql_prompt == expected_prompt and 
        sqlite_prompt == expected_prompt and 
        current_prompt == expected_prompt
    )
    
    if all_synced:
        report += "\nüéâ <b>–†–ï–ó–£–õ–¨–¢–ê–¢: –í–°–ï –ü–†–û–ú–ü–¢–´ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´!</b>"
        await bot.send_message(admin_id, report, parse_mode='HTML')
    else:
        report += "\nüö® <b>–†–ï–ó–£–õ–¨–¢–ê–¢: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–ó–õ–ò–ß–ò–Ø!</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–∏—è
        if postgresql_prompt != expected_prompt:
            report += f"‚ùå <b>PostgreSQL –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è:</b>\n<code>{postgresql_prompt[:300]}{'...' if len(postgresql_prompt) > 300 else ''}</code>\n\n"
        
        if sqlite_prompt != expected_prompt:
            report += f"‚ùå <b>SQLite –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è:</b>\n<code>{sqlite_prompt[:300]}{'...' if len(sqlite_prompt) > 300 else ''}</code>\n\n"
        
        report += f"‚úÖ <b>–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n<code>{expected_prompt[:300]}{'...' if len(expected_prompt) > 300 else ''}</code>"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(report) > 4000:
            await bot.send_message(admin_id, report[:4000] + "\n\n...(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)", parse_mode='HTML')
            await bot.send_message(admin_id, report[4000:], parse_mode='HTML')
        else:
            await bot.send_message(admin_id, report, parse_mode='HTML')

def get_recent_mistakes(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    try:
        from database import execute_query
        mistakes = execute_query('''
            SELECT text, llm_result, admin_decision, created_at
            FROM messages 
            WHERE admin_decision IS NOT NULL 
            AND ((llm_result = '–ù–ï_–°–ü–ê–ú' AND admin_decision = '–°–ü–ê–ú') 
                 OR (llm_result IN ('–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú') AND admin_decision = '–ù–ï_–°–ü–ê–ú'))
            ORDER BY admin_decided_at DESC 
            LIMIT ?
        ''', (limit,), fetch='all')
        return mistakes or []
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT text, llm_result, admin_decision, created_at
            FROM messages 
            WHERE admin_decision IS NOT NULL 
            AND ((llm_result = '–ù–ï_–°–ü–ê–ú' AND admin_decision = '–°–ü–ê–ú') 
                 OR (llm_result IN ('–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú') AND admin_decision = '–ù–ï_–°–ü–ê–ú'))
            ORDER BY admin_decided_at DESC 
            LIMIT ?
        ''', (limit,))
        mistakes = cursor.fetchall()
        conn.close()
        return mistakes

def parse_llm_response(response_text: str) -> SpamResult:
    """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM"""
    cleaned = re.sub(r'[^\w\s_]', '', response_text.strip().upper())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—Ä–µ–∑–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    maybe_spam_keywords = [
        '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û –°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û–°–ü–ê–ú', 
        'MAYBE_SPAM', 'MAYBE SPAM', 'MAYBE–°–ü–ê–ú',
        '–í–û–ó–ú–û', '–í–û–ó–ú–û–ñ'  # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    ]
    not_spam_keywords = [
        '–ù–ï_–°–ü–ê–ú', '–ù–ï –°–ü–ê–ú', '–ù–ï–°–ü–ê–ú', 
        'NOT_SPAM', 'NOT SPAM', 'NOTSPAM',
        '–ù–ï_–°–ü', '–ù–ï_–°'  # –û–±—Ä–µ–∑–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    ]
    spam_keywords = ['–°–ü–ê–ú', 'SPAM']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞
    if cleaned in ['–°–ü–ê–ú', 'SPAM']:
        return SpamResult.SPAM
    elif cleaned in ['–ù–ï_–°–ü–ê–ú', '–ù–ï –°–ü–ê–ú', '–ù–ï–°–ü–ê–ú', 'NOT_SPAM', 'NOT SPAM', 'NOTSPAM']:
        return SpamResult.NOT_SPAM
    elif cleaned in ['–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û –°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û–°–ü–ê–ú', 'MAYBE_SPAM', 'MAYBE SPAM']:
        return SpamResult.MAYBE_SPAM
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if any(keyword in cleaned for keyword in maybe_spam_keywords):
        return SpamResult.MAYBE_SPAM
    elif any(keyword in cleaned for keyword in not_spam_keywords):
        return SpamResult.NOT_SPAM
    elif any(keyword in cleaned for keyword in spam_keywords):
        return SpamResult.SPAM
    
    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç LLM: '{response_text}' (–æ—á–∏—â–µ–Ω–Ω—ã–π: '{cleaned}')")
    return SpamResult.MAYBE_SPAM

async def improve_prompt_with_ai(mistakes):
    """–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–º–æ—â—å—é ChatGPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫"""
    current_prompt = get_current_prompt()
    
    mistakes_text = ""
    for text, bot_decision, admin_decision, created_at in mistakes:
        mistakes_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{text}'\n–ë–æ—Ç —Ä–µ—à–∏–ª: {bot_decision}\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {admin_decision}\n\n"
    
    improvement_prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–∞–º–∞ –≤ Telegram.

–¢–ï–ö–£–©–ò–ô –ü–†–û–ú–ü–¢:
{current_prompt}

–û–®–ò–ë–ö–ò –ë–û–¢–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ):
{mistakes_text}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–∏ –ø—Ä–æ–º–ø—Ç, —á—Ç–æ–±—ã –±–æ—Ç –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª—è–ª —Å–ø–∞–º. 
–°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (—Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞), –Ω–æ –¥–æ–±–∞–≤—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫.

–û–¢–í–ï–¢–¨ –¢–û–õ–¨–ö–û –£–õ–£–ß–®–ï–ù–ù–´–ú –ü–†–û–ú–ü–¢–û–ú, –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –û–ë–™–Ø–°–ù–ï–ù–ò–ô:
"""
    
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4 –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            messages=[{"role": "user", "content": improvement_prompt}],
            max_tokens=1000,
            temperature=0.3,
            timeout=30
        )
        
        improved_prompt = response.choices[0].message.content.strip()
        logger.info("–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω —á–µ—Ä–µ–∑ AI")
        return improved_prompt
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        return None

async def check_message_with_llm(message_text: str) -> SpamResult:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM"""
    current_prompt = get_current_prompt()
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    logger.info(f"üéØ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø –ü–†–û–ú–ü–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:")
    logger.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –ø—É–Ω–∫—Ç—ã 1-5: {'1.' in current_prompt and '2.' in current_prompt}")
    logger.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {'–ò—Å–∫–ª—é—á–µ–Ω–∏—è' in current_prompt}")
    logger.info(f"   –î–ª–∏–Ω–∞: {len(current_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    prompt = current_prompt.format(message_text=message_text)
    
    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ ChatGPT: '{message_text[:50]}...'")
    logger.debug(f"üìù –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {prompt}")
    
    try:
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            temperature=0,
            timeout=10
        )
        
        llm_answer = response.choices[0].message.content.strip()
        result = parse_llm_response(llm_answer)
        
        logger.info(f"üéØ ChatGPT –æ—Ç–≤–µ—Ç–∏–ª: '{llm_answer}' (–¥–ª–∏–Ω–∞: {len(llm_answer)}) ‚Üí {result.value}")
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —ç—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        if len(llm_answer) < 3:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT: '{llm_answer}'")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ LLM: {e}")
        return SpamResult.MAYBE_SPAM

async def send_suspicious_message_to_admin(message: types.Message, result: SpamResult):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
    result_emoji = "üî¥" if result == SpamResult.SPAM else "üü°"
    
    admin_text = f"""{result_emoji} <b>{result.value}</b>

<b>–û—Ç:</b> {message.from_user.full_name} (@{message.from_user.username or '–Ω–µ—Ç username'})
<b>–ì—Ä—É–ø–ø–∞:</b> {message.chat.title}
<b>–í—Ä–µ–º—è:</b> {message.date.strftime('%H:%M:%S')}

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{message.text}</code>"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üî¥ –°–ü–ê–ú", callback_data=f"spam_{message.message_id}"),
            InlineKeyboardButton(text="üü¢ –ù–ï –°–ü–ê–ú", callback_data=f"not_spam_{message.message_id}")
        ]
    ])
    
    try:
        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {ADMIN_ID}")
        logger.info(f"üîò –ö–Ω–æ–ø–∫–∏: spam_{message.message_id}, not_spam_{message.message_id}")
        
        sent_message = await bot.send_message(
            ADMIN_ID, 
            admin_text, 
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É (ID: {sent_message.message_id})")
        
        except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

async def ban_spammer_and_delete(message: types.Message, spam_result: SpamResult):
    """–ó–∞–±–∞–Ω–∏—Ç—å —Å–ø–∞–º–µ—Ä–∞ –∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.delete_message(message.chat.id, message.message_id)
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
        
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.ban_chat_member(
            chat_id=message.chat.id,
            user_id=message.from_user.id
        )
        logger.info(f"üî® –ó–∞–±–∞–Ω–µ–Ω —Å–ø–∞–º–µ—Ä {message.from_user.id} (@{message.from_user.username})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞–∑–±–∞–Ω–∞
        await send_ban_report_to_admin(message, spam_result)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞/—É–¥–∞–ª–µ–Ω–∏—è: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ –∞–¥–º–∏–Ω—É
        await send_suspicious_message_to_admin(message, spam_result)
        return False

async def send_ban_report_to_admin(message: types.Message, result: SpamResult):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –±–∞–Ω–µ –∞–¥–º–∏–Ω—É"""
    ban_emoji = "üî¥"
    
    admin_text = f"""{ban_emoji} <b>–ê–í–¢–û–ë–ê–ù –ó–ê –°–ü–ê–ú</b>

<b>üë§ –ó–∞–±–∞–Ω–µ–Ω:</b> {message.from_user.full_name} (@{message.from_user.username or '–Ω–µ—Ç username'})
<b>üÜî User ID:</b> <code>{message.from_user.id}</code>
<b>üìç –ì—Ä—É–ø–ø–∞:</b> {message.chat.title}
<b>üïê –í—Ä–µ–º—è:</b> {message.date.strftime('%H:%M:%S')}
<b>ü§ñ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫:</b> {result.value}

<b>üìù –£–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>{message.text}</code>

<b>‚ö° –î–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:</b>
‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ
‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ù–ï –°–ü–ê–ú (—Ä–∞–∑–±–∞–Ω–∏—Ç—å)", callback_data=f"unban_{message.from_user.id}_{message.chat.id}_{message.message_id}")
        ]
    ])
    
    try:
        await bot.send_message(
            ADMIN_ID, 
            admin_text, 
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç –æ –±–∞–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –±–∞–Ω–µ: {e}")

async def analyze_bot_error(message_text: str, error_type: str):
    """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT"""
    logger.info(f"üîç –ù–ê–ß–ò–ù–ê–Æ analyze_bot_error: error_type={error_type}")
    
    if not openai_client:
        logger.error("‚ùå OpenAI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None, None
    
    logger.info(f"‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {openai_client is not None}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    current_prompt = get_current_prompt()
    logger.info(f"üß† –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–º–ø—Ç —Å –ø—É–Ω–∫—Ç–∞–º–∏: {'1.' in current_prompt and '2.' in current_prompt}")
        
    logger.info(f"üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É —Ç–∏–ø–∞ '{error_type}' –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: '{message_text[:50]}...'")
    logger.info(f"üîç –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç: {current_prompt[100:200]}...")
    
    if error_type == "missed_spam":
        analysis_prompt = f"""–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–ø–∞–º –≤ Telegram. –í–æ—Ç –æ–Ω:

{current_prompt}

–ù–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –ù–ï –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º, —Ö–æ—Ç—è —ç—Ç–æ —Å–ø–∞–º:
"{message_text}"

–ü–æ—á–µ–º—É —Ç—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ —Å–ø–∞–º? 

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –Ω—É–ª—è! –î–û–ü–û–õ–ù–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞–Ω–∏—è.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –ø—Ä–æ–º–ø—Ç–µ:
- –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã 1-6
- –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è
- –í–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –°–ü–ê–ú.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–ù–ê–õ–ò–ó: [–ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏]
–ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢: [–ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –í–°–ï–ú–ò —Å—Ç–∞—Ä—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ + –Ω–æ–≤—ã–º–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏]"""

    elif error_type == "uncertain_spam":
        analysis_prompt = f"""–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–ø–∞–º –≤ Telegram. –í–æ—Ç –æ–Ω:

{current_prompt}

–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú, –Ω–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –°–ü–ê–ú:
"{message_text}"

–ü–æ—á–µ–º—É —Ç—ã –±—ã–ª –Ω–µ—É–≤–µ—Ä–µ–Ω? 

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –Ω—É–ª—è! –î–û–ü–û–õ–ù–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –í–°–ï –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞–Ω–∏—è.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –ø—Ä–æ–º–ø—Ç–µ:
- –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã 1-6
- –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è
- –í–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –°–ü–ê–ú.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–ù–ê–õ–ò–ó: [–ø–æ—á–µ–º—É –±—ã–ª –Ω–µ—É–≤–µ—Ä–µ–Ω]
–ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢: [–ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –í–°–ï–ú–ò —Å—Ç–∞—Ä—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ + –Ω–æ–≤—ã–º–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏]"""

    else:  # false_positive
        analysis_prompt = f"""–£ —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Å–ø–∞–º –≤ Telegram. –í–æ—Ç –æ–Ω:

{current_prompt}

–ù–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º, —Ö–æ—Ç—è —ç—Ç–æ –ù–ï —Å–ø–∞–º:
"{message_text}"

–ü–æ—á–µ–º—É —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª —ç—Ç–æ –∫–∞–∫ —Å–ø–∞–º?

–í–ê–ñ–ù–û: –ù–ï —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –Ω—É–ª—è! –î–û–ü–û–õ–ù–ò —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–º –ø—Ä–æ–º–ø—Ç–µ:
- –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–Ω–∫—Ç—ã 1-6
- –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è
- –í–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏

–ó–ê–î–ê–ß–ê: –î–æ–±–∞–≤—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–∂–µ—Ç –ù–ï —Å—á–∏—Ç–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–∞–º–æ–º.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–ù–ê–õ–ò–ó: [–ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏]
–ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢: [–ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –í–°–ï–ú–ò —Å—Ç–∞—Ä—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ + –Ω–æ–≤—ã–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏/—É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏]"""

    try:
        logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ ChatGPT-4...")
        logger.info(f"üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(analysis_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": analysis_prompt}],
            max_tokens=1500,
            temperature=0.3,
            timeout=30
        )
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT-4")
        
        analysis = response.choices[0].message.content.strip()
        logger.info(f"üß† ChatGPT –æ—Ç–≤–µ—Ç–∏–ª (–¥–ª–∏–Ω–∞ {len(analysis)}): {analysis[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        if "–ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢:" in analysis:
            logger.info("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢")
        else:
            logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢")
            logger.warning(f"üìù –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {analysis}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        if "–ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢:" in analysis:
            improved_prompt = analysis.split("–ò–¢–û–ì–û–í–´–ô_–ü–†–û–ú–ü–¢:")[1].strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            checks = [
                ("{message_text}" in improved_prompt, "—à–∞–±–ª–æ–Ω {message_text}"),
                ("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã" in improved_prompt, "—Å–∏—Å—Ç–µ–º–Ω–æ–µ –Ω–∞—á–∞–ª–æ"),
                ("–±–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏" in improved_prompt, "–∑–Ω–∞–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö"),
                ("—Å–µ—Ä–¥–µ—á–∫–∏ üíò/üíù" in improved_prompt, "–∑–Ω–∞–Ω–∏—è –æ —Å–µ—Ä–¥–µ—á–∫–∞—Ö"),
                ("–∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã" in improved_prompt, "–∑–Ω–∞–Ω–∏—è –æ–± –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞—Ö")
            ]
            
            missing_elements = []
            for check, description in checks:
                if not check:
                    missing_elements.append(description)
                    logger.warning(f"‚ö†Ô∏è ChatGPT –ø–æ—Ç–µ—Ä—è–ª: {description}")
            
            if missing_elements:
                logger.error(f"‚ùå ChatGPT –ø–æ—Ç–µ—Ä—è–ª –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
                logger.error("üîÑ –ü—ã—Ç–∞—é—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç...")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if "{message_text}" not in improved_prompt:
                    if "–°–æ–æ–±—â–µ–Ω–∏–µ:" not in improved_prompt:
                        improved_prompt += "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª\n\n–û—Ç–≤–µ—Ç:"
            else:
                logger.info("‚úÖ ChatGPT —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å–µ –≤–∞–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
            
            return analysis, improved_prompt
        
        return analysis, None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None, None

@dp.message(F.content_type == 'text', F.forward_from)
async def handle_forwarded_spam(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–ø–∞–º–∞ (–æ—à–∏–±–∫–∏ –±–æ—Ç–∞)"""
    if message.from_user.id != ADMIN_ID:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–∏–º–µ—Ä —Å–ø–∞–º–∞
    add_training_example(message.text, True, 'FORWARDED_MISTAKE')
    
    await message.reply("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é, –ø–æ—á–µ–º—É –±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏–ª —ç—Ç–æ—Ç —Å–ø–∞–º...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ ChatGPT
    analysis, improved_prompt = await analyze_bot_error(message.text, "missed_spam")
    
    if improved_prompt:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_prompt"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_prompt"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_prompt")
            ]
        ])
        
        prompt_message = f"""ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>

{analysis}

<b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> "{message.text}"

<code>{improved_prompt}</code>"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        global pending_prompt
        pending_prompt = improved_prompt
        
        await bot.send_message(ADMIN_ID, prompt_message, reply_markup=keyboard, parse_mode='HTML')
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

# –í–ê–ñ–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞!

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    start_text = """ü§ñ <b>Kill Yr Spammers</b> - —É–º–Ω—ã–π –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç!

üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
‚Ä¢ –£—á—É—Å—å –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –∏ —É–ª—É—á—à–∞—é—Å—å
‚Ä¢ –†–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö

üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)
/editprompt - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç (–∞–¥–º–∏–Ω)
/groups - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∞–¥–º–∏–Ω)

üí° <b>–î–ª—è –æ–±—É—á–µ–Ω–∏—è:</b> –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º–∞"""
    
    await message.reply(start_text, parse_mode='HTML')

@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    help_text = """üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º Kill Yr Spammers</b>

üîπ <b>–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîπ <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/editprompt - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
/groups - —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞

üéØ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</b>
1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ ChatGPT
2Ô∏è‚É£ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
3Ô∏è‚É£ –£—á–∏—Ç—Å—è –Ω–∞ –≤–∞—à–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö (–°–ü–ê–ú/–ù–ï –°–ü–ê–ú)
4Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ—Ç —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç

üí° <b>–û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞:</b>
‚Ä¢ –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º–∞ –±–æ—Ç—É –≤ –ª–∏—á–∫—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏ –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç

üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ API –∑–∞—â–∏—â–µ–Ω –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    
    await message.reply(help_text, parse_mode='HTML')

@dp.message(Command("stats"))
async def stats_command(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    try:
        from database import execute_query
        total_messages = execute_query("SELECT COUNT(*) FROM messages", fetch='one')[0]
        spam_count = execute_query("SELECT COUNT(*) FROM messages WHERE llm_result = '–°–ü–ê–ú'", fetch='one')[0]
        maybe_spam_count = execute_query("SELECT COUNT(*) FROM messages WHERE llm_result = '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú'", fetch='one')[0]
        reviewed_count = execute_query("SELECT COUNT(*) FROM messages WHERE admin_decision IS NOT NULL", fetch='one')[0]
        training_count = execute_query("SELECT COUNT(*) FROM training_examples", fetch='one')[0]
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM messages")
        total_messages = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE llm_result = '–°–ü–ê–ú'")
        spam_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE llm_result = '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú'")
        maybe_spam_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM messages WHERE admin_decision IS NOT NULL")
        reviewed_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM training_examples")
        training_count = cursor.fetchone()[0]
        
        conn.close()
    
    stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç–∞</b>

üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
üî¥ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º: {spam_count}
üü° –í–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞–º: {maybe_spam_count}
‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º: {reviewed_count}
üß† –ü—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {training_count}"""
    
    await message.reply(stats_text, parse_mode='HTML')

@dp.message(Command("editprompt"))
async def edit_prompt_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /editprompt –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    from database import set_bot_state
    set_bot_state(ADMIN_ID, awaiting_prompt_edit=True)
    
    global awaiting_prompt_edit
    awaiting_prompt_edit = True
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î –∏ –ø–∞–º—è—Ç–∏")
    
    current_prompt = get_current_prompt()
    edit_message = f"""‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞</b>

<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>
<code>{current_prompt}</code>

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.</b> –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –¢—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –°–ü–ê–ú, –ù–ï_–°–ü–ê–ú, –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú
‚Ä¢ –ú–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: {{message_text}}

–î–ª—è –æ—Ç–º–µ–Ω—ã: /cancel"""
    
    await message.reply(edit_message, parse_mode='HTML')

@dp.message(Command("groups"))
async def show_allowed_groups(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    groups_text = "üîê <b>–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n\n"
    for group_id in ALLOWED_GROUP_IDS:
        groups_text += f"‚Ä¢ ID: <code>{group_id}</code>\n"
    
    groups_text += f"\n<b>–í—Å–µ–≥–æ –≥—Ä—É–ø–ø:</b> {len(ALLOWED_GROUP_IDS)}"
    groups_text += "\n\nüí° –¢–æ–ª—å–∫–æ —ç—Ç–∏ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API OpenAI"
    
    await message.reply(groups_text, parse_mode='HTML')

@dp.message(Command("version"))
async def show_prompt_version(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–º–ø—Ç–∞"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    current_prompt = get_current_prompt()
    
    version_info = f"üìù <b>–¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç:</b>\n\n<code>{current_prompt}</code>\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL
    try:
        from database import execute_query
        result = execute_query("SELECT improvement_reason, updated_at FROM current_prompt ORDER BY id DESC LIMIT 1", fetch='one')
        if result:
            reason, updated_at = result
            version_info += f"üóÑÔ∏è <b>PostgreSQL:</b> ‚úÖ –ù–∞–π–¥–µ–Ω\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {reason}\nüìÖ –î–∞—Ç–∞: {updated_at}"
        else:
            version_info += "üóÑÔ∏è <b>PostgreSQL:</b> ‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        version_info += f"üóÑÔ∏è <b>PostgreSQL:</b> ‚ùå –û—à–∏–±–∫–∞ - {e}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º SQLite fallback
    try:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT improvement_reason, updated_at FROM current_prompt ORDER BY id DESC LIMIT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            reason, updated_at = result
            version_info += f"\n\nüíæ <b>SQLite:</b> ‚úÖ –ù–∞–π–¥–µ–Ω\nüîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {reason}\nüìÖ –î–∞—Ç–∞: {updated_at}"
        else:
            version_info += "\n\nüíæ <b>SQLite:</b> ‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        version_info += f"\n\nüíæ <b>SQLite:</b> ‚ùå –û—à–∏–±–∫–∞ - {e}"
    
    await message.reply(version_info, parse_mode='HTML')

@dp.message(Command("cleanup"))
async def cleanup_old_prompts(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏–∑ PostgreSQL
        from database import execute_query
        execute_query("DROP TABLE IF EXISTS prompts")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ SQLite
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("DROP TABLE IF EXISTS prompts")
        conn.commit()
        conn.close()
        
        await message.reply("‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–º–ø—Ç–æ–≤ —É–¥–∞–ª–µ–Ω—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        from database import init_database as db_init
        db_init()
        
        await message.reply("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

@dp.message(Command("setprompt"))
async def set_correct_prompt(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¢–í–û–ô –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –¢–í–û–ô –ü–û–°–õ–ï–î–ù–ò–ô –ê–ö–¢–£–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢
    your_actual_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º, –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:

1. –ë–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ (–Ω–µ –æ–±—Ä–∞—â–µ–Ω–Ω—ã–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤ —á–∞—Ç–µ) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ–≤–µ—Ä—à–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –∫—Ä–∏–ø—Ç–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –æ–±–º–µ–Ω. –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ, –∫–æ–≥–¥–∞ —É–∫–∞–∑–∞–Ω—ã —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö.
2. –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç–º–æ–¥–∑–∏ üíò/üíù/üëÑ –∏ –ø–æ–¥–æ–±–Ω—ã–µ –∏–º.
3. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ –¥–ª—è —ç–º–æ—Ü–∏–π, –∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å–ø–∞–º, –Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥—É–º–∞—Ç—å, —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è:

- –ù–µ —Å—á–∏—Ç–∞–π —Å–ø–∞–º–æ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –Ω–æ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–∞–π—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–ø–∞–º–∞, —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ª–æ.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –µ–≥–æ —Å–º—ã—Å–ª–∞) —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, —ç—Ç–æ –ù–ï_–°–ü–ê–ú.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""
    
    try:
        save_new_prompt(your_actual_prompt, "–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –¢–í–û–ï–ì–û –ê–ö–¢–£–ê–õ–¨–ù–û–ì–û –ü–†–û–ú–ü–¢–ê")
        await message.reply("‚úÖ –¢–í–û–ô –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
        await verify_and_report_prompt_sync(your_actual_prompt, ADMIN_ID)
        
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")

@dp.message(Command("compare"))
async def compare_prompts(message: types.Message):
    """–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –≤ PostgreSQL –∏ SQLite"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ PostgreSQL
    postgresql_prompt = None
    try:
        from database import execute_query
        result = execute_query("SELECT prompt_text, improvement_reason, updated_at FROM current_prompt ORDER BY id DESC LIMIT 1", fetch='one')
        if result:
            postgresql_prompt, pg_reason, pg_date = result
        else:
            postgresql_prompt = None
    except Exception as e:
        postgresql_prompt = f"–û–®–ò–ë–ö–ê: {e}"
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ SQLite
    sqlite_prompt = None
    try:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT prompt_text, improvement_reason, updated_at FROM current_prompt ORDER BY id DESC LIMIT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            sqlite_prompt, sq_reason, sq_date = result
        else:
            sqlite_prompt = None
    except Exception as e:
        sqlite_prompt = f"–û–®–ò–ë–ö–ê: {e}"
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã
    if postgresql_prompt and sqlite_prompt and postgresql_prompt == sqlite_prompt:
        status = "‚úÖ –ü–†–û–ú–ü–¢–´ –ò–î–ï–ù–¢–ò–ß–ù–´"
        comparison = f"üìù <b>{status}</b>\n\n<code>{postgresql_prompt}</code>"
    else:
        status = "‚ùå –ü–†–û–ú–ü–¢–´ –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø"
        comparison = f"üö® <b>{status}</b>\n\n"
        
        if postgresql_prompt:
            comparison += f"üóÑÔ∏è <b>PostgreSQL:</b>\n<code>{postgresql_prompt[:500]}{'...' if len(postgresql_prompt) > 500 else ''}</code>\n\n"
        else:
            comparison += "üóÑÔ∏è <b>PostgreSQL:</b> ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
        if sqlite_prompt:
            comparison += f"üíæ <b>SQLite:</b>\n<code>{sqlite_prompt[:500]}{'...' if len(sqlite_prompt) > 500 else ''}</code>"
        else:
            comparison += "üíæ <b>SQLite:</b> ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(comparison) > 4000:
        await message.reply(comparison[:4000] + "\n\n...(–æ–±—Ä–µ–∑–∞–Ω–æ)", parse_mode='HTML')
        await message.reply(comparison[4000:], parse_mode='HTML')
    else:
        await message.reply(comparison, parse_mode='HTML')

@dp.message(Command("sync"))
async def sync_prompts(message: types.Message):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –º–µ–∂–¥—É –±–∞–∑–∞–º–∏"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.reply("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç—ã –º–µ–∂–¥—É –±–∞–∑–∞–º–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
    current_prompt = get_current_prompt()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ–∑–¥–µ
    save_new_prompt(current_prompt, "–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø")
    
    await message.reply("‚úÖ –ü—Ä–æ–º–ø—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö!")

@dp.message(Command("diagnose"))
async def full_prompt_diagnosis(message: types.Message):
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await message.reply("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é —Å —ç—Ç–∞–ª–æ–Ω–æ–º...")
    
    # –ü–æ–ª—É—á–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç - —Ç–æ—Ç —á—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–∑–¥–µ
    reference_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏: 

1. –ë–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ 
2. –ü—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º.
3. –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç–º–æ–¥–∑–∏ üíò/üíù/üëÑ –∏ –ø–æ–¥–æ–±–Ω—ã–µ –∏–º.
4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏
5. –ù–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.
6. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ –¥–ª—è —ç–º–æ—Ü–∏–π, –∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å–ø–∞–º, –Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥—É–º–∞—Ç—å, —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è:

- –ù–µ —Å—á–∏—Ç–∞–π —Å–ø–∞–º–æ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –Ω–æ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–∞–π—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–ø–∞–º–∞, —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ª–æ.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""
    
    diagnosis = f"üéØ <b>–≠–¢–ê–õ–û–ù–ù–´–ô –ü–†–û–ú–ü–¢ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ–∑–¥–µ):</b>\n<code>{reference_prompt}</code>\n\n"
    diagnosis += "üìä <b>–°–†–ê–í–ù–ï–ù–ò–ï –° –≠–¢–ê–õ–û–ù–û–ú:</b>\n\n"
    
    sources = []
    
    # 1. get_current_prompt()
    try:
        current = get_current_prompt()
        if current.strip() == reference_prompt.strip():
            diagnosis += "1Ô∏è‚É£ <b>get_current_prompt():</b> ‚úÖ –ò–î–ï–ù–¢–ò–ß–ï–ù\n"
        else:
            diagnosis += "1Ô∏è‚É£ <b>get_current_prompt():</b> ‚ùå –û–¢–õ–ò–ß–ê–ï–¢–°–Ø\n"
            sources.append(("get_current_prompt()", current))
    except Exception as e:
        diagnosis += f"1Ô∏è‚É£ <b>get_current_prompt():</b> ‚ùå –û–®–ò–ë–ö–ê - {e}\n"
    
    # 2. PostgreSQL
    try:
        from database import execute_query
        result = execute_query("SELECT prompt_text FROM current_prompt ORDER BY id DESC LIMIT 1", fetch='one')
        if result:
            pg_prompt = result[0]
            if pg_prompt.strip() == reference_prompt.strip():
                diagnosis += "2Ô∏è‚É£ <b>PostgreSQL:</b> ‚úÖ –ò–î–ï–ù–¢–ò–ß–ï–ù\n"
            else:
                diagnosis += "2Ô∏è‚É£ <b>PostgreSQL:</b> ‚ùå –û–¢–õ–ò–ß–ê–ï–¢–°–Ø\n"
                sources.append(("PostgreSQL", pg_prompt))
        else:
            diagnosis += "2Ô∏è‚É£ <b>PostgreSQL:</b> ‚ùå –ù–ï –ù–ê–ô–î–ï–ù\n"
    except Exception as e:
        diagnosis += f"2Ô∏è‚É£ <b>PostgreSQL:</b> ‚ùå –û–®–ò–ë–ö–ê - {e}\n"
    
    # 3. SQLite
    try:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT prompt_text FROM current_prompt ORDER BY id DESC LIMIT 1")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            sq_prompt = result[0]
            if sq_prompt.strip() == reference_prompt.strip():
                diagnosis += "3Ô∏è‚É£ <b>SQLite:</b> ‚úÖ –ò–î–ï–ù–¢–ò–ß–ï–ù\n\n"
            else:
                diagnosis += "3Ô∏è‚É£ <b>SQLite:</b> ‚ùå –û–¢–õ–ò–ß–ê–ï–¢–°–Ø\n\n"
                sources.append(("SQLite", sq_prompt))
        else:
            diagnosis += "3Ô∏è‚É£ <b>SQLite:</b> ‚ùå –ù–ï –ù–ê–ô–î–ï–ù\n\n"
    except Exception as e:
        diagnosis += f"3Ô∏è‚É£ <b>SQLite:</b> ‚ùå –û–®–ò–ë–ö–ê - {e}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    if sources:
        diagnosis += "üö® <b>–û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–ó–õ–ò–ß–ò–Ø:</b>\n\n"
        for source_name, source_prompt in sources:
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ
            ref_lines = reference_prompt.strip().split('\n')
            src_lines = source_prompt.strip().split('\n')
            
            for i, (ref_line, src_line) in enumerate(zip(ref_lines, src_lines)):
                if ref_line.strip() != src_line.strip():
                    diagnosis += f"‚ùå <b>{source_name} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–æ–∫–µ {i+1}:</b>\n"
                    diagnosis += f"   –≠—Ç–∞–ª–æ–Ω: <code>{ref_line}</code>\n"
                    diagnosis += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: <code>{src_line}</code>\n\n"
                    break
            else:
                if len(ref_lines) != len(src_lines):
                    diagnosis += f"‚ùå <b>{source_name} –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫:</b>\n"
                    diagnosis += f"   –≠—Ç–∞–ª–æ–Ω: {len(ref_lines)} —Å—Ç—Ä–æ–∫\n"
                    diagnosis += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {len(src_lines)} —Å—Ç—Ä–æ–∫\n\n"
    else:
        diagnosis += "üéâ <b>–í–°–ï –ü–†–û–ú–ü–¢–´ –ò–î–ï–ù–¢–ò–ß–ù–´ –≠–¢–ê–õ–û–ù–£!</b>\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(diagnosis) > 4000:
        await message.reply(diagnosis[:4000] + "\n\n...(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)", parse_mode='HTML')
        await message.reply(diagnosis[4000:], parse_mode='HTML')
    else:
        await message.reply(diagnosis, parse_mode='HTML')

@dp.message(Command("debug"))
async def debug_prompt_issue(message: types.Message):
    """–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —á–∞—Å—Ç–∏
    current = get_current_prompt()
    
    # –ò—â–µ–º –ø—É–Ω–∫—Ç 6
    if "6." in current:
        start = current.find("6.")
        point6_text = current[start:start+100]
        debug_info = f"üîç <b>–û–¢–õ–ê–î–ö–ê –ü–†–û–ú–ü–¢–ê:</b>\n\n‚úÖ –ü—É–Ω–∫—Ç 6 –Ω–∞–π–¥–µ–Ω:\n<code>{point6_text}...</code>\n\n"
    else:
        debug_info = f"üîç <b>–û–¢–õ–ê–î–ö–ê –ü–†–û–ú–ü–¢–ê:</b>\n\n‚ùå –ü—É–Ω–∫—Ç 6 –ù–ï –ù–ê–ô–î–ï–ù!\n\n"
    
    # –ò—â–µ–º —ç–º–æ–¥–∑–∏ üëÑ
    if "üëÑ" in current:
        heart_pos = current.find("üëÑ")
        heart_context = current[max(0, heart_pos-50):heart_pos+50]
        debug_info += f"‚úÖ –≠–º–æ–¥–∑–∏ üëÑ –Ω–∞–π–¥–µ–Ω–æ:\n<code>{heart_context}</code>\n\n"
    else:
        debug_info += "‚ùå –≠–º–æ–¥–∑–∏ üëÑ –ù–ï –ù–ê–ô–î–ï–ù–û!\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ–º–ø—Ç–∞
    debug_info += f"üìù <b>–ö–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞:</b>\n<code>{current[-200:]}</code>"
    
    await message.reply(debug_info, parse_mode='HTML')

@dp.message(Command("logs"))
async def show_action_logs(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        from action_logger import get_recent_actions
        actions = get_recent_actions(10)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
        
        if not actions:
            await message.reply("üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç—ã")
            return
        
        logs_text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
        
        for action in reversed(actions[-10:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            timestamp = action["timestamp"][:19].replace('T', ' ')
            action_type = action["action_type"]
            
            if action_type == "message_analysis":
                result = action.get("result", {})
                logs_text += f"üîç <b>–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è</b> ({timestamp})\n"
                logs_text += f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('llm_result', 'N/A')}\n"
                logs_text += f"   –¢–µ–∫—Å—Ç: {action['details'].get('text', '')[:50]}...\n\n"
                
            elif action_type == "button_click":
                logs_text += f"üîò <b>–ö–Ω–æ–ø–∫–∞: {action['details'].get('button', 'N/A')}</b> ({timestamp})\n"
                logs_text += f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {action['details'].get('original_llm_result', 'N/A')}\n"
                logs_text += f"   –¢–µ–∫—Å—Ç: {action['details'].get('text', '')[:50]}...\n\n"
                
            elif action_type == "prompt_improvement":
                result = action.get("result", {})
                logs_text += f"üß† <b>–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞</b> ({timestamp})\n"
                logs_text += f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {action['details'].get('error_type', 'N/A')}\n"
                logs_text += f"   –£—Å–ø–µ—à–Ω–æ: {action['details'].get('prompt_improved', False)}\n\n"
                
            elif action_type.startswith("error_"):
                logs_text += f"‚ùå <b>–û—à–∏–±–∫–∞: {action_type}</b> ({timestamp})\n"
                logs_text += f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {action.get('error', 'N/A')[:100]}...\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(logs_text) > 4000:
            logs_text = logs_text[:4000] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        await message.reply(logs_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–æ–≥–æ–≤: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

@dp.message(Command("cancel"))
async def cancel_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global awaiting_prompt_edit
    
    if message.from_user.id != ADMIN_ID:
        return
    
    if awaiting_prompt_edit:
        awaiting_prompt_edit = False
        await message.reply("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await message.reply("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


@dp.message(F.text & (F.chat.type == "private"))
async def handle_admin_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ –õ–ò–ß–ö–ï (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è)"""
    global awaiting_prompt_edit, pending_prompt
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if message.from_user.id != ADMIN_ID:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    if message.text and message.text.startswith('/'):
        return
    
    logger.info(f"üîç handle_admin_text –≤—ã–∑–≤–∞–Ω —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º: '{message.text[:50]}...'")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
    from database import get_bot_state, set_bot_state
    db_awaiting_edit, db_pending_prompt = get_bot_state(ADMIN_ID)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    awaiting_prompt_edit = db_awaiting_edit
    pending_prompt = db_pending_prompt
    
    logger.info(f"handle_admin_text: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î awaiting_prompt_edit = {awaiting_prompt_edit}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if awaiting_prompt_edit:
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–º–ø—Ç–∞
        if "{message_text}" not in message.text:
            await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å {message_text} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        
        required_words = ["–°–ü–ê–ú", "–ù–ï_–°–ü–ê–ú", "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"]
        if not all(word in message.text.upper() for word in required_words):
            await message.reply("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –°–ü–ê–ú, –ù–ï_–°–ü–ê–ú, –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ (–¥–ª–∏–Ω–∞: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
        set_bot_state(ADMIN_ID, awaiting_prompt_edit=False)
        awaiting_prompt_edit = False
        pending_prompt = None
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await message.reply("üîÑ –°–æ—Ö—Ä–∞–Ω—è—é –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç –≤–æ –≤—Å–µ—Ö –±–∞–∑–∞—Ö...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
        save_new_prompt(message.text, "–†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        
        # –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —á–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await verify_and_report_prompt_sync(message.text, ADMIN_ID)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return

@dp.message(F.content_type == 'text')
async def handle_message(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"üîç –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï: –æ—Ç {message.from_user.id} (@{message.from_user.username}) –≤ —á–∞—Ç–µ '{message.chat.title}' (—Ç–∏–ø: {message.chat.type}, ID: {message.chat.id})")
    logger.info(f"üìù –¢–µ–∫—Å—Ç: '{message.text[:100]}...'")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
    if message.from_user.is_bot:
        logger.info("ü§ñ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
        return
    
    # –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
    if message.chat.type == 'private':
        if message.from_user.id != ADMIN_ID:
            return  # –ù–µ –∞–¥–º–∏–Ω - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if not message.forward_from and not message.forward_from_chat:
            return  # –ê–¥–º–∏–Ω, –Ω–æ –ù–ï –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    
    # –í –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
    elif message.chat.type in ['group', 'supergroup']:
        if message.chat.id not in ALLOWED_GROUP_IDS:
            logger.warning(f"üö´ –ì–†–£–ü–ü–ê –ù–ï –í –ë–ï–õ–û–ú –°–ü–ò–°–ö–ï: {message.chat.title} (ID: {message.chat.id}) - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
        
    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ LLM
    spam_result = await check_message_with_llm(message.text)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        from action_logger import log_message_analysis
        log_message_analysis(
            message.message_id,
            message.text,
            {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "chat_title": message.chat.title,
                "chat_id": message.chat.id
            },
            spam_result.value
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_message_to_db(message, spam_result)
    
    # –î—É–±–ª–∏—Ä—É–µ–º –≤ backup —Ñ–∞–π–ª
    try:
        from backup_messages import backup_message
        backup_message({
            "message_id": message.message_id,
            "chat_id": message.chat.id,
            "user_id": message.from_user.id,
            "username": message.from_user.username or "",
            "text": message.text,
            "llm_result": spam_result.value
        })
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ backup: {e}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    if spam_result == SpamResult.SPAM:
        # –°–ü–ê–ú - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–Ω–∏–º –∏ —É–¥–∞–ª—è–µ–º
        logger.info(f"üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ü–ê–ú! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–∞–Ω—é –∏ —É–¥–∞–ª—è—é...")
        ban_success = await ban_spammer_and_delete(message, spam_result)
        
        if not ban_success:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω—É –∫–∞–∫ –æ–±—ã—á–Ω–æ")
            
    elif spam_result == SpamResult.MAYBE_SPAM:
        # –í–û–ó–ú–û–ñ–ù–û –°–ü–ê–ú - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info(f"üü° –í–æ–∑–º–æ–∂–Ω–æ —Å–ø–∞–º, –æ—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        await send_suspicious_message_to_admin(message, spam_result)
        
    else:
        # –ù–ï –°–ü–ê–ú - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —á–∏—Å—Ç–æ–µ ({spam_result.value})")

@dp.callback_query(F.data.startswith("spam_") | F.data.startswith("not_spam_"))
async def handle_admin_feedback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        logger.warning(f"‚ö†Ô∏è –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ –æ—Ç {callback.from_user.id}")
        return
    
    if callback.data.startswith("not_spam_"):
        action = "not_spam"
        message_id = int(callback.data.replace("not_spam_", ""))
    elif callback.data.startswith("spam_"):
        action = "spam"
        message_id = int(callback.data.replace("spam_", ""))
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        return
    
    logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏: action={action}, message_id={message_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç LLM –∏–∑ –ë–î
    try:
        from database import execute_query
        result = execute_query("SELECT text, llm_result FROM messages WHERE message_id = ?", (message_id,), fetch='one')
    except:
        conn = sqlite3.connect('antispam.db')
        cursor = conn.cursor()
        cursor.execute("SELECT text, llm_result FROM messages WHERE message_id = ?", (message_id,))
        result = cursor.fetchone()
        conn.close()
    
    if not result:
        logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–∞–º–æ–≥–æ callback
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è callback
            original_text = callback.message.text
            if "–°–æ–æ–±—â–µ–Ω–∏–µ:" in original_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É <code> —Ç–µ–≥–∞–º–∏
                import re
                code_match = re.search(r'<code>(.*?)</code>', original_text, re.DOTALL)
                if code_match:
                    message_text = code_match.group(1).strip()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º llm_result –∏–∑ —ç–º–æ–¥–∑–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                    if "üî¥" in original_text:
                        llm_result = "–°–ü–ê–ú"
                    elif "üü°" in original_text:
                        llm_result = "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"
                    else:
                        llm_result = "–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
                    save_message_to_db_direct(message_id, 0, 0, "unknown", message_text, llm_result)
                    
                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ callback: '{message_text[:50]}...'")
                    result = (message_text, llm_result)
                else:
                    await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                    return
            else:
                await callback.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
    
    message_text, llm_result = result
    decision = "–°–ü–ê–ú" if action == "spam" else "–ù–ï_–°–ü–ê–ú"
    is_spam = (action == "spam")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    try:
        from action_logger import log_button_click
        log_button_click(callback.from_user.id, action, message_id, message_text, llm_result)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    update_admin_decision(message_id, decision)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã
    add_training_example(message_text, is_spam, 'ADMIN_FEEDBACK')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    decision_emoji = "‚ùå" if is_spam else "‚úÖ"
    new_text = f"{callback.message.text}\n\n{decision_emoji} <b>–†–µ—à–µ–Ω–∏–µ: {decision}</b>"
    
    await callback.message.edit_text(new_text, parse_mode='HTML')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—É—á–µ–Ω–∏–µ
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: action={action}, llm_result={llm_result}")
    
    needs_learning = False
    error_type = None
    
    if action == "not_spam" and llm_result in ['–°–ü–ê–ú', '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú']:
        needs_learning = True
        error_type = "false_positive"
    elif action == "spam" and llm_result == '–ù–ï_–°–ü–ê–ú':
        needs_learning = True
        error_type = "missed_spam"
    elif action == "spam" and llm_result == '–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú':
        needs_learning = True
        error_type = "uncertain_spam"
    
    if needs_learning:
        logger.info(f"üö® –ó–∞–ø—É—Å–∫–∞—é –æ–±—É—á–µ–Ω–∏–µ! –¢–∏–ø: {error_type}")
        await callback.answer(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ {decision}. –£–ª—É—á—à–∞—é –ø—Ä–æ–º–ø—Ç...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_message = await bot.send_message(
            ADMIN_ID, 
            f"üîÑ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É...</b>\n\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{message_text}</code>\n"
            f"ü§ñ –ë–æ—Ç —Ä–µ—à–∏–ª: {llm_result}\n"
            f"üë§ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ: {decision}\n"
            f"üß† –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {error_type}\n\n"
            f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ ChatGPT-4...",
            parse_mode='HTML'
        )
        
        logger.info(f"üìä –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {error_type}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ ChatGPT
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            await progress_message.edit_text(
                f"üîÑ <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É...</b>\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{message_text}</code>\n"
                f"ü§ñ –ë–æ—Ç —Ä–µ—à–∏–ª: {llm_result}\n"
                f"üë§ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ: {decision}\n"
                f"üß† –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {error_type}\n\n"
                f"ü§ñ ChatGPT-4 –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...",
                parse_mode='HTML'
            )
            
            analysis, improved_prompt = await analyze_bot_error(message_text, error_type)
            logger.info(f"üß† –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: analysis={analysis is not None}, prompt={improved_prompt is not None}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            from action_logger import log_prompt_improvement
            log_prompt_improvement(callback.from_user.id, error_type, message_text, analysis, improved_prompt)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
            await progress_message.delete()
            
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í analyze_bot_error: {e}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            import traceback
            error_details = traceback.format_exc()
            logger.error(f"üìù –ü–û–õ–ù–ê–Ø –û–®–ò–ë–ö–ê: {error_details}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–æ–π
            await progress_message.edit_text(
                f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</b>\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: <code>{message_text}</code>\n"
                f"üö® –û—à–∏–±–∫–∞: <code>{str(e)}</code>\n"
                f"üîß –¢–∏–ø: {type(e).__name__}\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /logs –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                parse_mode='HTML'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            from action_logger import log_error
            log_error("prompt_improvement", callback.from_user.id, str(e), {
                "error_type": error_type,
                "message_text": message_text[:100],
                "full_traceback": error_details
            })
            
            analysis, improved_prompt = None, None
        
        if improved_prompt:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_prompt"),
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_prompt"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_prompt")
                ]
            ])
            
            global pending_prompt
            pending_prompt = improved_prompt
            
            error_description = "–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º" if error_type == "false_positive" else "–ø—Ä–æ–ø—É—Å—Ç–∏–ª —Å–ø–∞–º"
            
            prompt_message = f"""ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –±–æ—Ç–∞:</b>

<b>–û—à–∏–±–∫–∞:</b> –ë–æ—Ç {error_description}
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> "{message_text}"

{analysis}

<code>{improved_prompt}</code>"""
            
            await bot.send_message(ADMIN_ID, prompt_message, reply_markup=keyboard, parse_mode='HTML')
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
            await bot.send_message(ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'\n–û—à–∏–±–∫–∞: {error_type}")
    else:
        logger.info(f"‚ÑπÔ∏è –ù–µ –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: action={action}, llm_result={llm_result}")
        await callback.answer(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ {decision}")

@dp.callback_query(F.data.startswith("unban_"))
async def handle_unban_request(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞–∑–±–∞–Ω (–∫–Ω–æ–ø–∫–∞ –ù–ï –°–ü–ê–ú –ø–æ–¥ –∞–≤—Ç–æ–±–∞–Ω–æ–º)"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: unban_user_id_chat_id_message_id
        parts = callback.data.split("_")
        user_id = int(parts[1])
        chat_id = int(parts[2])
        original_message_id = int(parts[3])
        
        logger.info(f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–∞–Ω: user_id={user_id}, chat_id={chat_id}")
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—Ç—á–µ—Ç–∞
        original_text = callback.message.text
        import re
        code_match = re.search(r'<code>(.*?)</code>', original_text, re.DOTALL)
        
        if code_match:
            message_text = code_match.group(1).strip()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            new_text = f"{original_text}\n\nüü¢ <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –†–ê–ó–ë–ê–ù–ï–ù</b>\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É –±–æ—Ç–∞..."
            await callback.message.edit_text(new_text, parse_mode='HTML')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –±–æ—Ç–∞ (–æ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞–∫ —Å–ø–∞–º)
            analysis, improved_prompt = await analyze_bot_error(message_text, "false_positive")
            
            if improved_prompt:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", callback_data="apply_prompt"),
                        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_prompt"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_prompt")
                    ]
                ])
                
                global pending_prompt
                pending_prompt = improved_prompt
                
                prompt_message = f"""ü§ñ <b>–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–±–∞–Ω–∞:</b>

<b>–û—à–∏–±–∫–∞:</b> –ë–æ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–∞–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> "{message_text}"

{analysis}

<code>{improved_prompt}</code>"""
                
                await bot.send_message(ADMIN_ID, prompt_message, reply_markup=keyboard, parse_mode='HTML')
            
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω, –æ—à–∏–±–∫–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            await callback.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {e}")

@dp.callback_query(F.data.in_(["apply_prompt", "edit_prompt", "reject_prompt", "edit_current_prompt"]))
async def handle_prompt_management(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
    global pending_prompt, awaiting_prompt_edit
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if callback.data == "apply_prompt":
        if pending_prompt:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await callback.answer("üîÑ –ü—Ä–∏–º–µ–Ω—è—é –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –ø—Ä–æ–º–ø—Ç...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
            save_new_prompt(pending_prompt, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"{callback.message.text}\n\nüîÑ <b>–ü—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...</b>",
                parse_mode='HTML'
            )
            
            # –†–ï–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
            await verify_and_report_prompt_sync(pending_prompt, ADMIN_ID)
            
            pending_prompt = None
        else:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
    
    elif callback.data == "edit_prompt" or callback.data == "edit_current_prompt":
        awaiting_prompt_edit = True
        
        if callback.data == "edit_current_prompt":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            current_prompt = get_current_prompt()
            edit_message = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞</b>\n\n<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:</b>\n<code>{current_prompt}</code>\n\n"
        else:
            edit_message = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞</b>\n\n"
        
        edit_message += """–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞. –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
‚Ä¢ –¢—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: –°–ü–ê–ú, –ù–ï_–°–ü–ê–ú, –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú
‚Ä¢ –ú–µ—Å—Ç–æ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}

–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"""
        
        await callback.message.reply(edit_message, parse_mode='HTML')
        await callback.answer("‚úèÔ∏è –ñ–¥—É –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")
    
    elif callback.data == "reject_prompt":
        pending_prompt = None
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå <b>–ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>",
            parse_mode='HTML'
        )
        await callback.answer("‚ùå –ü—Ä–æ–º–ø—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global openai_client, bot
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if not OPENAI_API_KEY:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if ADMIN_ID == 0:
        logger.error("‚ùå ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    try:
        bot = Bot(token=BOT_TOKEN)
        logger.info("‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
    try:
        openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)
        logger.info("‚úÖ OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    from database import init_database as db_init
    db_init()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ backup —Ñ–∞–π–ª–∞
    try:
        from backup_messages import restore_messages_from_backup
        restored_count = restore_messages_from_backup()
        if restored_count > 0:
            logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ backup")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backup: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        BotCommand(command="start", description="ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand(command="help", description="üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand(command="editprompt", description="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand(command="groups", description="üîê –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∞–¥–º–∏–Ω)"),
        BotCommand(command="version", description="üìã –í–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞ (–∞–¥–º–∏–Ω)"),
        BotCommand(command="cleanup", description="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand(command="setprompt", description="üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∞–¥–º–∏–Ω)"),
        BotCommand(command="compare", description="üîç –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –≤ –±–∞–∑–∞—Ö (–∞–¥–º–∏–Ω)"),
        BotCommand(command="sync", description="üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã (–∞–¥–º–∏–Ω)"),
        BotCommand(command="diagnose", description="üîç –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ (–∞–¥–º–∏–Ω)"),
        BotCommand(command="logs", description="üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π (–∞–¥–º–∏–Ω)"),
        BotCommand(command="cancel", description="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞–¥–º–∏–Ω)")
    ]
    
    try:
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥: {e}")
    
    logger.info("ü§ñ Kill Yr Spammers –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {ADMIN_ID}")
    logger.info(f"üîê –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø: {len(ALLOWED_GROUP_IDS)}")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∫–∞–∫–æ–π –ø—Ä–æ–º–ø—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    logger.info("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–û–ú–ü–¢–ê –ü–†–ò –°–¢–ê–†–¢–ï:")
    startup_prompt = get_current_prompt()
    logger.info(f"üéØ –°–¢–ê–†–¢–û–í–´–ô –ü–†–û–ú–ü–¢:")
    logger.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –ø—É–Ω–∫—Ç—ã 1-5: {'1.' in startup_prompt and '2.' in startup_prompt}")
    logger.info(f"   –°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {'–ò—Å–∫–ª—é—á–µ–Ω–∏—è' in startup_prompt}")
    logger.info(f"   –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(startup_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É–Ω–∫—Ç–æ–≤ - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if not ('1.' in startup_prompt and '2.' in startup_prompt):
        logger.error("üö® –û–ë–ù–ê–†–£–ñ–ï–ù –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢! –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –°–û–ó–î–ê–Æ –ü–†–ê–í–ò–õ–¨–ù–´–ô")
        
        correct_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–≥—Ä—É–ø–ø—ã –∏ –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º –∏–∑ —Ç—Ä—ë—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
–°–ü–ê–ú
–ù–ï_–°–ü–ê–ú  
–í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú

–°—á–∏—Ç–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏: 

1. –ë–µ–∑–∞–¥—Ä–µ—Å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ 
2. –ü—Ä–∏–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–æ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –≤–Ω–µ—à–Ω–∏–º —Å—Å—ã–ª–∫–∞–º.
3. –°–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç–º–æ–¥–∑–∏ üíò/üíù/üëÑ –∏ –ø–æ–¥–æ–±–Ω—ã–µ –∏–º.
4. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å–≥–∏
5. –ù–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.
6. –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–µ –¥–ª—è —ç–º–æ—Ü–∏–π, –∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ —Å–ø–∞–º, –Ω–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥—É–º–∞—Ç—å, —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º ‚Äî –≤—ã–±–∏—Ä–∞–π –í–û–ó–ú–û–ñ–ù–û_–°–ü–ê–ú.

–ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è:

- –ù–µ —Å—á–∏—Ç–∞–π —Å–ø–∞–º–æ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É, –Ω–æ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ—Å—É—Ä—Å –±–µ–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–∞–π—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã), —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–ø–∞–º–∞, —Å—á–∏—Ç–∞–π –µ–≥–æ –ù–ï_–°–ü–ê–ú, –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ª–æ.

–°–æ–æ–±—â–µ–Ω–∏–µ: ¬´{message_text}¬ª

–û—Ç–≤–µ—Ç:"""
        
        save_new_prompt(correct_prompt, "–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ò –°–¢–ê–†–¢–ï")
        logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–æ–∫–∞–ª—å–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
    if not os.getenv("RAILWAY_ENVIRONMENT"):
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º —Å Railway –±–æ—Ç–æ–º!")
        print("üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ Railway –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.")
        print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)
    
    asyncio.run(main())
